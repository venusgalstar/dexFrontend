{"version":3,"sources":["views/Lottery/components/BridgeLottery.tsx","views/Lottery/components/TicketBoard/CountDownDate.tsx","views/Lottery/components/TicketBoard/index.tsx","views/Lottery/components/FinishedRounds/HistoryButtons.tsx","views/Lottery/components/FinishedRounds/index.tsx","views/Lottery/components/HowToPlay/index.tsx","views/Lottery/components/FAQ/index.tsx","views/Lottery/Lottery.tsx"],"names":["LotteryInfo","styled","div","BridgeLottery","t","useTranslation","maxBalance","useBrisBalance","useState","lotteryinfo","setLotteryinfo","lotteryid","useCurrentLotteryId","onViewLottery","useLotteryInfo","useModal","BuyTicketModal","max","BigNumber","onPresentBuyTicketsModal","useEffect","a","toString","lottery","fontSize","mb","color","fontWeight","variant","scale","style","margin","width","onClick","Number","Time","Value","Flex","theme","colors","bright","primary","mediaQueries","sm","Img","img","TimeLabel","Text","text","CountDownDate","timeDays","timeHours","timeMinutes","timeSeconds","seconds","Math","floor","src","alt","Board","DrawTimeDisplay","Draw","PrizeDisplay","PrizePot","PrizePotDetails","CountDownTimer","UserTicket","span","CountDown","TicketBoard","accountTickets","setAccountTickets","Date","getTime","currentTime","setCurrentTime","onAccountTickets","useAccountTickets","ticketsArr","interval","setInterval","clearInterval","date","toDateString","toLocaleTimeString","m","length","StyledNav","HistoryButtons","activeIndex","useRouteMatch","url","isExact","id","to","as","Link","RoundsContainer","Title","HistoryBtnsContainer","RoundDate","RoundNum","PrizeWinningContainer","PotTitle","PotHeading","TotalTickets","WinningNumber","Prize","Latest","WinningNumbers","Grid","DrawNumber","textSubtle","FinishedRounds","finalNumber","console","log","undefined","usingSplit","split","map","num","HowToPlayContainer","Wordings","PlaySteps","md","Steps","StepNumber","HowToPlay","FaqContainer","xs","DocsLink","FaqImg","Faq","href","target","rel","Lottery","lotteryContract","useLottery","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","fetch","then","response","json","data","catch","getLotteryIssueIndex","index","previousLotteryNumber","getInitialLotteryIndex","Page"],"mappings":"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","file":"static/js/23.2abe01b8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Heading, Text, BaseLayout, Button, Image, Card, Flex, Grid, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport useBrisBalance from 'hooks/useGetBrisBalance'\nimport { useLotteryInfo, useCurrentLotteryId } from 'hooks/useBuyLottery'\nimport BuyTicketModal from './TicketCard/BuyTicketModal'\n\nconst ticketPrice = 1\n\nconst LotteryInfo = styled.div`\n    display: flex;\n    background-image: url(/images/decorations/bg-design-large.svg);\n    background-repeat: no-repeat;\n    background-position: top center;\n    flex-direction: column;\n    justify-content: center;\n    border-radius: 12px;\n    text-align: center;\n    padding: 30px 0px;\n    margin: 12px;\n`\n\nconst BridgeLottery = () => {\n\n  const { t } = useTranslation()\n  const maxBalance = useBrisBalance()\n  const [lotteryinfo, setLotteryinfo] = useState({})\n  const lotteryid = useCurrentLotteryId()\n  const { onViewLottery } = useLotteryInfo()\n\n\n  const [onPresentBuyTicketsModal] = useModal(<BuyTicketModal max={new BigNumber(maxBalance)}/>)\n  useEffect(() => {\n      (async () => {\n          const lottery = await onViewLottery(lotteryid.toString())\n          setLotteryinfo(lottery)\n      })()\n  }, [lotteryid, onViewLottery])\n\n\n  return (\n      <LotteryInfo>\n          <Text fontSize=\"12px\" mb=\"15px\" color=\"text\">\n            {t(\"The BridgeSwap Lottery\")}\n          </Text><Text fontWeight=\"700\" mb=\"15px\" fontSize=\"42px\">\n            {t(\"Win $0\")}\n          </Text>\n          <Text fontSize=\"12px\" mb=\"22px\" color=\"text\">\n            {t(\"in prizes\")}\n          </Text>\n          <Button variant=\"primary\" scale=\"sm\" style={{margin: \"10px auto\", width: \"200px\"}} onClick={onPresentBuyTicketsModal}>Buy tickets</Button>\n          <Text fontSize='12px' color='text'>\n              {t(`Tickets sold at $${Number(lotteryinfo[3])} per ticket`)}\n          </Text>\n      </LotteryInfo>\n  )\n}\n\nexport default BridgeLottery\n","import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport { Heading, Text, BaseLayout, Button, Image, Card, Flex, Grid, useModal } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\n\nconst Time = styled.div`\n    text-align: center;\n`\nconst Value = styled(Flex)`\n    align-items: center;\n    justify-content: center;\n    width: 40px;\n    height: 40px;\n    border-radius: 6px;\n    color: ${({ theme }) => theme.colors.bright};\n    background-color: ${({ theme }) => theme.colors.primary};\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        width: 60px;\n        height: 60px;\n    }\n`\n\nconst Img = styled.img`\n    width: 7px;\n    height: 32px;\n    margin-top: 7px;\n    \n    ${({ theme }) => theme.mediaQueries.sm} {\n        margin-top: 15px;\n\n    }\n`\n\nconst TimeLabel = styled(Text)`\n    color: ${({ theme }) => theme.colors.text};\n    font-size: 10px;\n`\n\ninterface CountDownDateProps {\n    seconds: number\n}\n\nconst CountDownDate: React.FC<CountDownDateProps> = ({seconds}) => {\n    let timeDays\n    let timeHours\n    let timeMinutes\n    let timeSeconds\n\n    if (seconds > 0) {\n        // Calculating the days, hours, minutes and seconds left\n        timeDays = Math.floor(seconds / (60 * 60 * 24))\n        timeHours = Math.floor((seconds % (60 * 60 * 24)) / (60 * 60))\n        timeMinutes = Math.floor((seconds % (60 * 60)) / 60)\n        timeSeconds = Math.floor(seconds % 60)\n\n        timeDays = timeDays < 10 ? `0${timeDays}` : timeDays\n        timeHours = timeHours < 10 ? `0${timeHours}` : timeHours\n        timeMinutes = timeMinutes < 10 ? `0${timeMinutes}` : timeMinutes\n        timeSeconds = timeSeconds < 10 ? `0${timeSeconds}` : timeSeconds\n    } else {\n        timeDays = '00'\n        timeHours = '00'\n        timeMinutes = '00'\n        timeSeconds = '00'\n    }\n\n    return (\n        <>\n        <Time>\n            <Value>{timeHours}</Value>\n            <TimeLabel>HOURS</TimeLabel>\n        </Time>\n        <Img src=\"/images/time-divider.svg\" alt=\"time-divider\" />\n        <Time>\n            <Value>{timeMinutes}</Value>\n            <TimeLabel>MINUTES</TimeLabel>\n        </Time>\n        <Img src=\"/images/time-divider.svg\" alt=\"time-divider\" />\n        <Time>\n            <Value>{timeSeconds}</Value>\n            <TimeLabel>SECONDS</TimeLabel>\n        </Time>\n        </>\n    )\n}\n\nexport default CountDownDate","import React, { useContext, useState, useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Heading, Text, BaseLayout, Button, Image, Card, Flex, Grid, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { useAccountTickets, useCurrentLotteryId, useLotteryInfo } from 'hooks/useBuyLottery'\nimport useBrisBalance from 'hooks/useGetBrisBalance'\nimport BuyTicketModal from '../TicketCard/BuyTicketModal'\nimport CountDownDate from './CountDownDate'\n\n// Local states. These values can be updated\n// const drawNumber = 329\n// const drawTime = \"Feb 20, 2022, 1:27 AM\"\n// const lotteryPrize = \"300, 000\"\n// const brisAmt = 579\n// const userNumTicket = 0\n// const timeHours = 16\n// const timeMinutes = 45\n// const timeSeconds = 27\n\n\nconst Board = styled.div`\n    border-radius: 20px;\n    width: 95%;\n    margin: 0 auto;\n    margin-bottom: 10px;\n    padding: 20px;\n    background-color: #0F0F71;\n    background-image: url(/images/decorations/lottery-prize-bg.svg);\n    background-position: center;\n    ${({ theme }) => theme.mediaQueries.sm} {\n        padding: 50px;\n        margin-bottom: 15px;\n    }\n`\nconst DrawTimeDisplay = styled(Flex)`\n    justify-content: space-between;\n\n`\nconst Draw = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n`\nconst PrizeDisplay = styled(Flex)`\n    flex-direction: column;\n    justify-content: center;\n    margin: 30px auto;\n    text-align: center;\n    width: 100%;\n\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        text-align: left;\n        width: 70%;\n    }\n\n`\nconst PrizePot = styled(Flex)`\n    justify-content: center;\n    flex-direction: column;\n    \n    ${({ theme }) => theme.mediaQueries.sm} {\n        margin-bottom: 0px;\n        flex-direction: row;\n        justify-content: space-between;\n\n    }\n`\n\nconst PrizePotDetails = styled.div`\n    margin-bottom: 20px;\n    margin-right: 0px;\n    min-width: 150px;\n    ${({ theme }) => theme.mediaQueries.sm} {\n        margin-bottom: 0px;\n        margin-right: 20px;\n    }\n\n`\nconst CountDownTimer = styled.div`\n    text-align: center;\n`\n\nconst UserTicket = styled.span`\n    color: ${({ theme }) => theme.colors.primary};\n`\nconst CountDown = styled(Flex)`\n    align-items: flex-start;\n    justify-content: center;\n`\nconst Time = styled.div`\n    text-align: center;\n`\nconst Value = styled(Flex)`\n    align-items: center;\n    justify-content: center;\n    width: 40px;\n    height: 40px;\n    border-radius: 6px;\n    color: ${({ theme }) => theme.colors.bright};\n    background-color: ${({ theme }) => theme.colors.primary};\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        width: 60px;\n        height: 60px;\n    }\n`\n\nconst Img = styled.img`\n    width: 7px;\n    height: 32px;\n    margin-top: 7px;\n    \n    ${({ theme }) => theme.mediaQueries.sm} {\n        margin-top: 15px;\n\n    }\n`\n\nconst TimeLabel = styled(Text)`\n    color: ${({ theme }) => theme.colors.text};\n    font-size: 10px;\n`\n\nconst TicketBoard = () => {\n    const { t } = useTranslation()\n\n    const maxBalance = useBrisBalance()\n\n    const [lotteryinfo, setLotteryinfo] = useState({})\n    const [accountTickets, setAccountTickets] = useState([])\n    const [currentTime, setCurrentTime] = useState(new Date().getTime());\n\n    const lotteryid = useCurrentLotteryId()\n    const { onViewLottery } = useLotteryInfo()\n    const { onAccountTickets } = useAccountTickets()\n\n    useEffect(() => {\n        (async () => {\n            const lottery = await onViewLottery(lotteryid.toString())\n            setLotteryinfo(lottery)\n        })()\n    }, [lotteryid, onViewLottery])\n\n    useEffect(() => {\n        (async () => {\n            const ticketsArr = await onAccountTickets(lotteryid.toString())\n            setAccountTickets(ticketsArr)\n        })()\n    }, [lotteryid, onAccountTickets])\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentTime(new Date().getTime())\n        }, 1000)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    const date = `${new Date(Number(lotteryinfo[2])).toDateString()} ${new Date(Number(lotteryinfo[2])).toLocaleTimeString()}`\n    const [onPresentBuyTicketsModal] = useModal(<BuyTicketModal max={new BigNumber(maxBalance)}/>)\n\n\n    return (\n        <Board>\n            <DrawTimeDisplay>\n                <Text fontSize=\"14px\" color='text'>\n                    {t(\"Next Draw\")}\n                </Text>\n                <Draw>\n                    <Text fontSize=\"12px\" color='text'>{`#${lotteryid}`}</Text >\n                    <Text m=\"0px 4px\" fontSize=\"12px\" color='text'>|</Text>\n                    <Text fontSize=\"12px\" color='text'>{`Draw: ${date}`}</Text>\n                </Draw>\n\n            </DrawTimeDisplay>\n            <PrizeDisplay>\n                <Text color='text'>\n                    {t(\"Prize Pot\")}\n                </Text>\n                <PrizePot>\n                    <PrizePotDetails>\n                        <Heading>\n                            {t(`$${Number(lotteryinfo[11])}`)}\n                        </Heading>\n                        <Text fontSize='11px' mb=\"22px\" color='textSubtle'>\n                            {t(`~${Number(lotteryinfo[11])} BRIS`)}\n                        </Text>\n                        <Text color='text'>\n                            {t(\"Your Tickets\")}\n                        </Text>\n                        <Text mb=\"22px\" fontSize='12px' color='text'>\n                            {t(`You have `)}\n                            <UserTicket>{`{${accountTickets.length}}`}</UserTicket>\n                            {t(` tickets for this round.`)}\n                        </Text>\n                        <Button scale=\"sm\" variant=\"primary\" onClick={onPresentBuyTicketsModal}>Buy Tickets</Button>                        \n                    </PrizePotDetails>\n\n                    <CountDownTimer>\n                        <Text mb=\"12px\" color='text'>\n                            {t(\"Get Your Tickets Now\")}\n                        </Text>\n                        <CountDown>\n                            <CountDownDate seconds={16501793732 - (currentTime / 1000)} />\n\n                            {/* <Time>\n                                <Value>{timeHours}</Value>\n                                <TimeLabel>HOURS</TimeLabel>\n                            </Time>\n                            <Img src=\"/images/time-divider.svg\" alt=\"time-divider\" />\n                            <Time>\n                                <Value>{timeMinutes}</Value>\n                                <TimeLabel>MINUTES</TimeLabel>\n                            </Time>\n                            <Img src=\"/images/time-divider.svg\" alt=\"time-divider\" />\n                            <Time>\n                                <Value>{timeSeconds}</Value>\n                                <TimeLabel>SECONDS</TimeLabel>\n                            </Time> */}\n                        </CountDown>\n                    </CountDownTimer>\n                </PrizePot>\n\n            </PrizeDisplay>\n        </Board>\n    )\n}\n\nexport default TicketBoard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledNav = styled.div`\n  margin-bottom: 40px;\n`\n\n\nfunction HistoryButtons({ activeIndex = 0 }) {\n    const { t } = useTranslation()\n    const { url, isExact } = useRouteMatch()\n\n\n    return (\n\n        <StyledNav>\n            <ButtonMenu activeIndex={isExact ? activeIndex : 1} scale=\"sm\" variant=\"primary\">\n            <ButtonMenuItem id=\"allhistory-nav-link\" to={`${url}`} as={Link}>\n                {t('All History')}\n            </ButtonMenuItem>\n            <ButtonMenuItem id=\"myhistory-nav-link\" to={`${url}/history`} as={Link}>\n                {t('My History')}\n            </ButtonMenuItem>\n            \n            </ButtonMenu>\n        </StyledNav>\n    )\n}\n\nexport default HistoryButtons\n","import React, { useContext, useEffect, useState } from 'react'\nimport { Heading, Text, BaseLayout, Button, Image, Card, Flex, Grid } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAccountTickets, useCurrentLotteryId, useLotteryInfo } from 'hooks/useBuyLottery'\nimport HistoryButtons from './HistoryButtons'\n\n\n// Local states. These values can be updated\n// const roundNumValue = 328\n// const drawDate = \"Feb 21, 2022, 1:31 PM\"\n// const lotteryPrize = \"20,000\"\n// const brisAmt = 99\n// const userNumTicket = 0;\n// const totalTickets = 658\n// const winningNumbers = [1, 2, 3, 4, 5, 6]\n\nconst RoundsContainer = styled.div`\n    border-radius: 20px;\n    background: linear-gradient(245.94deg, rgba(8, 8, 56, 0.2) -63.8%, rgba(17, 17, 139, 0.2) 73.44%);\n    padding: 40px;\n    margin-bottom: 10px; \n`\nconst Title = styled(Flex)`\n    justify-content: center;\n    flex-direction: column;\n    text-align: center;\n    \n    ${({ theme }) => theme.mediaQueries.sm} {\n        justify-content: space-between;\n        flex-direction: row;\n    }\n`\n\nconst HistoryBtnsContainer = styled.div`\n\n`\n\nconst RoundDate = styled(Flex)`\n\n`\nconst RoundNum = styled.span`\n    color: ${({ theme }) => theme.colors.bright};\n    background: #15154F;\n    border-radius: 50px;\n    padding: 1px 6px;\n    margin: 0 3px;\n`\nconst PrizeWinningContainer = styled(Flex)`\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        flex-direction: row;\n    }\n`\nconst PrizePot = styled.div`\n    background: #15154F;\n    border-radius: 30px;\n    flex: 0 0 100%;\n    width: 100%;\n    margin-bottom: 10px;\n    padding: 19px;\n\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        margin-bottom: 0px;\n        padding: 40px 20px;\n        flex: 0 0 50%;\n\n    }\n`\nconst PotTitle = styled(Flex)`\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 10px;\n\n`\nconst PotHeading = styled(Text)`\n    color: ${({ theme }) => theme.colors.text};\n    font-size: 15px;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        font-size: 20px;\n\n    }\n`\nconst TotalTickets = styled(Text)`\n    color: ${({ theme }) => theme.colors.text};\n    font-size: 11px;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        font-size: 14px;\n    }\n\n`\n\nconst WinningNumber = styled.div`\n    padding: 20px;\n    background: #15154F;\n    border-radius: 30px;\n    width: 100%;\n    text-align: center;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        font-size: 14px;\n        flex: 0 0 38%;\n\n    }\n`\nconst Prize = styled.div`\n\n`\nconst UserTicket = styled.span`\n    color: ${({ theme }) => theme.colors.primary};\n`\nconst Latest = styled.div`\n    background: ${({ theme }) => theme.colors.primary};\n    padding: 3px 30px;\n    border-radius: 20px;\n    text-align: center;\n    width: 150px;\n    margin-right: auto;\n    margin-left: auto;\n`\nconst WinningNumbers = styled(Grid)`\n    width: 80%;\n    margin: 0 auto;\n    grid-template-columns: repeat(3, 60px);\n    grid-gap: 12px;\n    justify-content: center;\n}\n`\nconst DrawNumber = styled.div`\n    background: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 50%;\n    padding: 20px 0px;\n    color: ${({ theme }) => theme.colors.text};\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        padding: 25px 0px;\n    }\n\n`\n\nconst FinishedRounds = () => {\n    const { t } = useTranslation()\n    const [lotteryinfo, setLotteryinfo] = useState({})\n    const [accountTickets, setAccountTickets] = useState([])\n\n    const lotteryid = useCurrentLotteryId()\n    const { onViewLottery } = useLotteryInfo()\n    const { onAccountTickets } = useAccountTickets()\n\n\n    useEffect(() => {\n        (async () => {\n            const lottery = await onViewLottery((Number(lotteryid)-1).toString())\n            console.log(\"lottery info: \", lottery)\n            setLotteryinfo(lottery)\n        })()\n    }, [lotteryid, onViewLottery])\n\n    useEffect(() => {\n        (async () => {\n            const ticketsArr = await onAccountTickets((Number(lotteryid)-1).toString())\n            setAccountTickets(ticketsArr)\n        })()\n    }, [lotteryid, onAccountTickets])\n\n    let finalNumber\n    if(lotteryinfo[12] === undefined || lotteryinfo[12] === '0') {\n        finalNumber = 'XXXXXX'\n    } else {\n        finalNumber = lotteryinfo[12]\n    }\n\n    const date = `${new Date(Number(lotteryinfo[2])).toDateString()} ${new Date(Number(lotteryinfo[2])).toLocaleTimeString()}`\n    const usingSplit = finalNumber.split('')\n\n\n    return (\n        <RoundsContainer>\n            <Title>\n                <Heading mb='12px' scale='md' color='text'>Finished Rounds</Heading>\n                <HistoryBtnsContainer>\n                    <HistoryButtons activeIndex={0} />\n                </HistoryBtnsContainer>\n            </Title>\n            <RoundDate>\n                <Text mb=\"22px\" fontSize='12px' color='text'>\n                    {t(`Round `)}\n                    <RoundNum>{`${Number(lotteryid)-1}`}</RoundNum>\n                    {t(` Drawn ${date}`)}\n                </Text>\n            </RoundDate>\n            <PrizeWinningContainer>\n                <PrizePot>\n                    <PotTitle>\n                        <PotHeading>\n                            {t(`Prize Pot`)}\n                        </PotHeading>\n                        <TotalTickets>\n                            {t(`Total tickets this round: ${Number(lotteryinfo[11])}`)}\n                        </TotalTickets>\n                    </PotTitle>\n                    <Prize>\n                        <Heading>\n                            {t(`$${Number(lotteryinfo[11])}`)}\n                        </Heading>\n                        <Text fontSize='11px' mb=\"22px\" color='textSubtle'>\n                            {t(`~${Number(lotteryinfo[11])} BRIS`)}\n                        </Text>\n                    </Prize>\n                    <Text color='text'>\n                        {t(\"Your Tickets\")}\n                    </Text>\n                    <Text mb=\"22px\" fontSize='12px' color='text'>\n                        {t(`You have `)}\n                        <UserTicket>{`{${accountTickets.length}}`}</UserTicket>\n                        {t(` tickets for this round.`)}\n                    </Text>\n                </PrizePot>\n                <WinningNumber>\n                    <Latest>\n                        <Text fontSize='13px' color='text'>{t('LATEST')}</Text>\n                    </Latest>\n                    <Text m='10px 0px' fontSize='20px' color='text'>{t('Winning Number')}</Text>\n                    <WinningNumbers>\n                        {\n                            usingSplit.map((num: number) => <DrawNumber>{num}</DrawNumber>)\n                        }\n                    </WinningNumbers>\n                </WinningNumber>\n            </PrizeWinningContainer>\n        </RoundsContainer>\n    )\n}\n\nexport default FinishedRounds\n","import React from 'react'\nimport { Heading, Text, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n\nconst HowToPlayContainer = styled.div`\n    border-radius: 20px;\n    background: linear-gradient(245.94deg, rgba(8, 8, 56, 0.2) -63.8%, rgba(17, 17, 139, 0.2) 73.44%);\n    padding: 20px;\n    text-align: center;\n    margin-bottom: 10px;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        padding: 40px;\n    }\n`\n\nconst Wordings = styled(Text)`\n    color: ${({ theme }) => theme.colors.text};\n    width: 100%;\n    margin: 0 auto;\n    font-size: 10px;\n    margin-bottom: 30px;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        width: 50%;\n    }\n`\nconst PlaySteps = styled(Flex)`\n    justify-content: center;\n    width: 90%;\n    max-width: 700px;\n    margin-right: auto;\n    margin-left: auto;\n    flex-direction: column;\n    \n    ${({ theme }) => theme.mediaQueries.sm} {\n        width: 100%;\n        flex-direction: row;\n\n    }\n\n    ${({ theme }) => theme.mediaQueries.md} {\n        flex-direction: row;\n        justify-content: space-between;\n        width: 85%;\n    }\n\n`\n\nconst Steps = styled.div`\n    background: #15154F;\n    border-radius: 10px;\n    padding: 20px 15px;\n    text-align: left;\n    max-width: 220px;\n    min-width: 170px;\n    margin: 5px auto;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        margin: 3px;\n    }\n\n    ${({ theme }) => theme.mediaQueries.md} {\n        margin: 5px;\n    }\n`\nconst StepNumber = styled(Flex)`\n    color: ${({ theme }) => theme.colors.text};\n    background: linear-gradient(155.08deg, #FA00FF -35.34%, #17D2FB 134.08%);\n    border-radius: 12px;\n    width: 49px;\n    height: 47px;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 10px;\n`\n\nconst HowToPlay = () => {\n    const { t } = useTranslation()\n    return (\n        <HowToPlayContainer>\n            <Heading mb='10px' color='blue'>\n                {t('How To Play')}\n            </Heading>\n            <Wordings>\n                {t('If the digits on your tickets match the winning numbers in the correct order, you win a portion of the prize pool. Simple!')}\n            </Wordings>\n            <PlaySteps>\n                <Steps>\n                    <StepNumber>1</StepNumber>\n                    <Heading mb='10px' color='text'>{t(\"Buy Tickets\")}</Heading>\n                    <Text style={{ color: \"rgba(255, 255, 255, 0.7)\", fontSize: \"12px\" }}>\n                        {t(\"Prices are set when the round starts, equal to $1 in BRIS per ticket.\")}\n                    </Text>\n                </Steps>\n                <Steps>\n                    <StepNumber>2</StepNumber>\n                    <Heading mb='10px' color='text'>{t(\"Wait for the Draw\")}</Heading>\n                    <Text style={{ color: \"rgba(255, 255, 255, 0.7)\", fontSize: \"12px\" }}>\n                        {t(\"There is one draw every day alternating between 0 AM UTC and 12 PM UTC.\")}\n                    </Text>\n                </Steps>\n                <Steps>\n                    <StepNumber>3</StepNumber>\n                    <Heading mb='10px' scale=\"md\" color='text'>{t(\"Check for Prizes\")}</Heading>\n                    <Text style={{ color: \"rgba(255, 255, 255, 0.7)\", fontSize: \"12px\" }}>\n                        {t(\"Once the round’s over, come back to the page and check to see if you’ve won!\")}\n                    </Text>\n                </Steps>\n            </PlaySteps>\n        </HowToPlayContainer>\n    )\n}\n\nexport default HowToPlay\n\n","import React, { useContext, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Heading, Text, BaseLayout, Button, Image, Card, Flex, Grid } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\n\nconst FaqContainer = styled(Flex)`\n    border-radius: 20px;\n    background: linear-gradient(248.11deg, #14146E 25.22%, #2626BE 122.1%);\n    padding: 20px;\n    justify-content: center;\n    align-items: center;    \n\n    ${({ theme }) => theme.mediaQueries.xs} {\n        justify-content: space-between;\n        padding: 20px;\n    }\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        padding: 20px 80px;\n    }\n`\nconst Wordings = styled.div`\n    max-width: 200px;\n    \n    ${({ theme }) => theme.mediaQueries.xs} {\n        max-width: 300px;\n    }\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        max-width: 400px;\n    }\n`\nconst DocsLink = styled.a`\n\n`\nconst FaqImg = styled.img`\n    display: none;\n    \n    ${({ theme }) => theme.mediaQueries.xs} {\n        display: inline;\n        height: 80px;\n    }\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n        height: 150px;\n    }\n`\n\nconst Faq = () => {\n    const { t } = useTranslation()\n    return (\n        <FaqContainer>\n            <Wordings>\n                <Heading color='text'>{t(\"Got questions?\")}</Heading>\n                <Text mb='20px' fontSize='14px' color='text'>{t(\"Go over our detailed explanation in the docs section.\")}</Text>\n                <DocsLink href='https://bridgeswap-exchange-1.gitbook.io/bridgeswap/core-products/lottery' target='_blank' rel='noreferrer noopener'>\n                    <Text fontSize='14px' color='text'>\n                        {t('Go to docs')}\n                        &#x2192;\n                    </Text>\n                </DocsLink>\n            </Wordings>\n            <FaqImg src='/images/faq-image.svg' alt='faq' />\n            \n        </FaqContainer>\n    )\n}\n\nexport default Faq\n","import React, { useState, useEffect } from 'react'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport { useLottery } from 'hooks/useContract'\nimport Page from 'components/layout/Page'\nimport Hero from './components/Hero'\nimport PastDrawsPage from './PastDrawsPage'\nimport BridgeLottery from './components/BridgeLottery'\nimport TicketBoard from './components/TicketBoard'\nimport FinishedRounds from './components/FinishedRounds'\nimport HowToPlay from './components/HowToPlay'\nimport Faq from './components/FAQ'\n\nconst Lottery: React.FC = () => {\n  const lotteryContract = useLottery()\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(1)\n\n  useEffect(() => {\n    fetch(`https://api.pancakeswap.com/api/lotteryHistory`)\n      .then((response) => response.json())\n      .then((data) => setHistoryData(data))\n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [lotteryContract])\n\n  return (\n    <>\n      {/* <Hero /> */}\n      <Page>\n        <BridgeLottery />\n        <TicketBoard />\n        <FinishedRounds />\n        <HowToPlay />\n        <Faq />\n        {/* <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          <PastDrawsPage />\n        </PastLotteryDataContext.Provider> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n"],"sourceRoot":""}