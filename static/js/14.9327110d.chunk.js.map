{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","hooks/useContract.ts","hooks/useWeb3.ts","utils/bscscan.ts","components/UnlockButton.tsx","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTokenBalance.ts","utils/getTimePeriods.ts","hooks/usePersistState.ts"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","BIG_ZERO","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","chainlinkOracleContract","useChainlinkOracleContract","useEffect","a","methods","latestAnswer","call","response","getBalanceAmount","BigNumber","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","account","useWeb3React","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","useRef","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","current","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","claim","send","from","once","result","markBetAsCollected","transactionHash","href","getBscScanTransactionUrl","error","message","console","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","claimedHash","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","getBscScanBlockNumberUrl","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","getBscScanAddressUrl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","BIG_TEN","pow","BIG_NINE","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","balanceDisplay","useMemo","maxBalance","minBetAmountBalance","valueAsBn","showFieldWarning","percent","setPercent","handlePercentChange","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","toFormat","lte","eq","isNaN","key","lt","getButtonProps","bnValue","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","percentage","Math","floor","min","isWarning","inputProps","name","max","onValueChanged","valueLabel","step","percentShortcut","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useBlockCountdown","secondsRemaining","setSecondsRemaining","web3","getWeb3NoAccount","eth","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","localStorageKey","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","Number","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader","useIfoV1Contract","address","useWeb3","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useERC721","getErc721Contract","useCake","getCakeContract","useBRIS","useBunnyFactory","getBunnyFactoryContract","useProfile","getProfileContract","useLottery","getLotteryContract","useNewLottery","getNewLotteryContract","useLotteryTicket","getLotteryTicketContract","useReferralContract","getReferralContract","useMasterchef","getMasterchefContract","useSousChef","getSouschefContract","usePointCenterIfoContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useClaimRefundContract","getClaimRefundContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","getPredictionsContract","getChainlinkOracleContract","library","refEth","Web3","setweb3","BASE_BSC_SCAN_URL","block","getBscScanBlockCountdownUrl","useAuth","login","logout","onPresentConnectModal","useWalletModal","Date","now","setStateLastUpdated","previousLastUpdated","useCallback","FetchStatus","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","contract","balanceOf","res","fetchBalance","getBalance","walletBalance","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","prev","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","delta","abs","timeLeft","years","months","days","defaultOptions","hydrate","identity","dehydrate","initialValue","userOptions","valueFromLS","localStorage","getItem","JSON","parse","setItem","stringify"],"mappings":"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","file":"static/js/14.9327110d.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(BIG_ZERO)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const chainlinkOracleContract = useChainlinkOracleContract()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\n    }\n\n    fetchPrice()\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictions'\nimport { getMarketData } from 'state/predictions/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport { markBetAsCollected } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  roundId: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  roundId,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        dispatch(markBetAsCollected({ account, roundId }))\n        onDismiss()\n        setIsPendingTx(false)\n        toastSuccess(\n          t('Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {t('Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={getBscScanTransactionUrl(result.transactionHash)}>\n                {t('View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  roundId: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  roundId,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(t('Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={payout}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanTransactionUrl(bet.claimedHash)} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{t('Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { getMultiplier } from '../../helpers'\nimport { PayoutRow, RoundResult } from '../RoundResult'\nimport BetResult from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResult>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #EE6C51;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { formatBnb } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst TREASURY_FEE = 0.03\n\nconst getNetPayout = (bet: Bet) => {\n  const rawPayout = getPayout(bet)\n  const fee = rawPayout * TREASURY_FEE\n  return rawPayout - fee - bet.amount\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useBetCanClaim } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  epoch: number\n  payout: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  epoch,\n  payout,\n  isBottom = false,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const canClaim = useBetCanClaim(account, roundId)\n\n  if (!canClaim) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBetByRoundId } from 'state/hooks'\nimport { RoundResult } from '../RoundResult'\nimport { getPayout } from '../../helpers'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bet = useGetBetByRoundId(account, round.id)\n  const payout = getPayout(bet)\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: Round\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const totalInterval = useGetIntervalBlocks()\n  const price = useGetLastOraclePrice()\n  const isBull = price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval\n  const priceDifference = price.minus(lockPrice).toNumber()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (currentBlock > estimatedEndBlock) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsd(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\n// /!\\ TEMPORARY /!\\\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\n// TODO: Remove on beta-v2 smart contract release.\nconst gasPrice = new BigNumber(6).times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: BigNumber) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = useMemo(() => {\n    return getBnbAmount(bnbBalance).toString()\n  }, [bnbBalance])\n  const maxBalance = useMemo(() => {\n    return getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance)\n  }, [bnbBalance])\n  const minBetAmountBalance = useMemo(() => {\n    return getBnbAmount(minBetAmount)\n  }, [minBetAmount])\n\n  const valueAsBn = new BigNumber(value)\n\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const [percent, setPercent] = useState(0)\n\n  const handleInputChange = (input: string) => {\n    if (input) {\n      const percentage = Math.floor(new BigNumber(input).dividedBy(maxBalance).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = maxBalance.dividedBy(100).multipliedBy(sliderPercent)\n      setValue(percentageOfStakingMax.toFormat(18))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue, gasPrice })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError(t('Error'), error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent}%` : ''}\n          step={0.1}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n          claimedHash: null,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport { fetchCurrentBets } from 'state/predictions'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk',\n  })\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_chart',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBRISContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getReferralContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getNewLotteryContract\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n// CAKE and TTNP are the same\nexport const useBRIS = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useNewLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getNewLotteryContract(web3), [web3])\n}\n\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useReferralContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getReferralContract(web3), [web3])\n}\n\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t('Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n"],"sourceRoot":""}