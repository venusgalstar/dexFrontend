{"version":3,"sources":["views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/PercentageButton.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/Modals/CollectModal.tsx","views/Pools/components/PoolCard/CardActions/HarvestActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/PoolCard/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolTabButtons.tsx","views/Pools/components/BountyModal.tsx","views/Pools/components/BountyCard.tsx","views/Pools/components/HelpButton.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Apr.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Harvest.tsx","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx","utils/getTimePeriods.ts"],"names":["ViewMode","AprRow","pool","performanceFee","t","useTranslation","stakingToken","earningToken","isFinished","apr","earningTokenPrice","isAutoVault","tooltipContent","useTooltip","placement","targetRef","tooltip","tooltipVisible","getAprData","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","apyModalLink","address","BASE_EXCHANGE_URL","process","useModal","ApyCalculatorModal","tokenPrice","linkLabel","symbol","linkHref","earningTokenSymbol","onPresentApyModal","alignItems","justifyContent","ref","width","height","Balance","fontSize","isDisabled","value","decimals","unit","bold","onClick","variant","scale","color","PromotedGradient","keyframes","StyledCard","styled","Card","theme","colors","isPromoted","css","primaryBright","secondary","props","card","background","isDesktop","mediaQueries","sm","StyledCardInner","Box","radii","ExpandedWrapper","Flex","ExpandedFooter","account","currentBlock","useBlock","useCakeVault","totalCakeInVault","fees","totalStaked","contractAddress","sousId","tokenAddress","getAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","toLowerCase","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","getPoolBlockInfo","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","flexDirection","mb","small","getBalanceNumber","manualCakeTotalMinusAutoVault","BigNumber","minus","getTotalStakedBalance","ml","textTransform","href","projectLink","BASE_BSC_SCAN_URL","p","registerToken","React","memo","ExpandableButtonWrapper","Footer","useState","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","Wrapper","CardHeader","backgroundDisabled","gradients","StyledCardHeader","stakingTokenSymbol","isStaking","poolImageSrc","toLocaleLowerCase","isCakePool","src","alt","ApprovalAction","isLoading","stakingTokenContract","useERC20","useSousApprove","handleApprove","requestedApproval","endIcon","spin","disabled","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","headerBackground","cardHeader","mt","as","external","StyledButton","Button","PercentageButton","children","mx","StakeModal","isBnbPool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","userData","stakingLimit","onStake","useSousStake","onUnstake","useSousUnstake","enableEmergencyWithdraw","useToast","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","getCalculatedStakingLimit","stakedBalance","gt","usdValueStaked","formatNumber","times","toNumber","useEffect","fullDecimalStakeAmount","getDecimalAmount","plus","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","getFullDisplayBalance","handleConfirmClick","a","style","textAlign","amount","token","minWidth","onUserInput","input","convertedInput","percentage","Math","floor","min","currencyValue","isWarning","balance","max","onValueChanged","name","valueLabel","step","parseFloat","StakeAction","isStaked","stakedTokenBalance","stakedTokenDollarBalance","onPresentTokenRequired","onPresentStake","onPresentUnstake","reachStakingLimit","gte","prefix","mr","CollectModal","formattedBalance","fullBalance","earningsDollarValue","isCompoundPool","onReward","useSousHarvest","shouldCompound","setShouldCompound","tooltipOffset","handleHarvestConfirm","activeIndex","onItemClick","index","pb","HarvestActions","earnings","earningTokenBalance","earningTokenDollarBalance","hasEarnings","onPresentCollect","display","InlineText","Text","CardActions","harvest","poolCategory","PoolCategory","BINANCE","allowance","BIG_ZERO","pendingReward","needsApproval","StakeActions","PoolCard","accountHasStakedBalance","ribbon","variantColor","text","UnlockButton","CardFooter","VaultApprovalAction","setLastUpdated","useVaultApprove","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","WithdrawalFeeTimer","getTimePeriods","days","hours","minutes","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","useWeb3React","withdrawalFee","feeAsDecimal","fee","parseInt","noFeeToPay","shouldShowTimer","FeeSummary","feeInCake","toFixed","VaultStakeModal","stakingMax","dispatch","useAppDispatch","cakeVaultContract","useCakeVaultContract","pricePerFullShare","cakePriceBusd","usePriceCakeBusd","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","methods","withdrawAll","send","from","on","fetchCakeVaultUserData","error","console","message","withdraw","toString","handleDeposit","deposit","BIG_TEN","pow","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","VaultStakeActions","accountHasSharesStaked","CakeVaultCardActions","useCheckVaultApprovalStatus","isVaultApproved","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","toLocaleString","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","isXl","useMatchBreakpoints","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","Container","div","ToggleView","viewMode","onToggle","handleToggle","mode","id","CARD","TABLE","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","setViewMode","useRouteMatch","url","isExact","isXs","isSm","viewModeToggle","liveOrFinishedSwitch","to","show","stakedOnlySwitch","checked","onChange","prev","Divider","BountyModal","cakeBountyToDisplay","dollarBountyToDisplay","totalPendingCakeHarvest","callFee","TooltipComponent","callFeeAsDecimal","totalYieldToDisplay","tooltipPadding","right","gas","DEFAULT_GAS_LIMIT","textSubtle","BountyCard","estimatedCakeBountyReward","estimatedDollarBountyReward","useMemo","hasFetchedDollarBounty","hasFetchedCakeBounty","fontWeight","onPresentBountyModal","ButtonText","xs","HelpButton","px","BaseCell","CellContent","StyledCell","NameCell","hasVaultShares","iconFile","showStakedTag","subtitle","showSubtitle","role","HelpIconWrapper","EarningsCell","userDataLoaded","labelText","asset","event","stopPropagation","undefined","Apr","showIcon","openRoiModal","md","AprCell","TotalStakedCell","totalStakedBalance","EndsInCell","endBlock","renderBlocks","flex","getBscScanBlockCountdownUrl","e","showLoading","ArrowIcon","ChevronDownIcon","toggled","isFullLayout","ActionContainer","xl","ActionTitles","ActionContent","HarvestAction","displayBalance","actionTitle","pt","alignSelf","lineHeight","marginTop","IconButtonWrapper","Staked","handlePoolApprove","requestedPoolApproval","handleVaultApprove","requestedVaultApproval","isNotVaultAndHasStake","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","onPresentVaultStake","onPresentVaultUnstake","expandAnimation","collapseAnimation","StyledActionPanel","lg","InfoSection","ActionPanel","breakpoints","isMd","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","tagTargetRef","tagTooltip","tagTooltipVisible","maxStakeRow","blocksRow","aprRow","totalStakedRow","maxWidth","Harvest","Stake","StyledRow","PoolRow","isLg","setExpanded","shouldRenderActionPanel","useDelayedUnmount","ExpandActionCell","StyledTable","StyledTableBorder","cardBorder","ScrollButtonContainer","PoolsTable","pools","tableWrapperEl","useRef","map","current","scrollIntoView","behavior","CardLayout","FlexLayout","PoolControls","SearchSortContainer","ControlStretch","Pools","location","useLocation","usePools","poolsWithoutAutoVault","usePersistState","localStorageKey","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","searchQuery","setSearchQuery","sortOption","setSortOption","accountHasVaultShares","cakePool","find","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","isGreaterThan","stakedOnlyOpenPools","length","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","showFinishedPools","pathname","includes","poolsToShow","chosenPools","lowercaseQuery","latinise","poolsToSort","orderBy","sortPools","slice","cardLayout","tableLayout","PageHeader","Page","Select","options","label","option","SearchInput","target","placeholder","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","abs","timeLeft","years","months"],"mappings":"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","file":"static/js/21.2376589b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s TTNP is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card, Box } from '@pancakeswap/uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\ninterface PromotedStyleCardProps {\n  isDesktop: boolean\n}\n\nexport const StyledCard = styled(Card)<{ isPromoted?: PromotedStyleCardProps; isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n\n  ${({ isPromoted, theme }) =>\n    isPromoted\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ isPromoted }) =>\n    isPromoted &&\n    isPromoted.isDesktop &&\n    css`\n      animation: ${PromotedGradient} 3s ease infinite;\n    `}\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled(Box)`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const { stakingToken, earningToken, totalStaked, contractAddress, sousId, isAutoVault } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked ? (\n            <>\n              <Balance fontSize=\"14px\" value={getTotalStakedBalance()} />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {stakingToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance color=\"primary\" fontSize=\"14px\" value={blocksToDisplay} decimals={0} />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal bold={false} small href={earningToken.projectLink}>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            bold={false}\n            small\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { CardHeader, Heading, Text, Flex, Image } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningTokenSymbol: string\n  stakingTokenSymbol: string\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningTokenSymbol, stakingTokenSymbol, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const poolImageSrc = isAutoVault\n    ? `bris-brisvault.svg`\n    : `${earningTokenSymbol}-${stakingTokenSymbol}.svg`.toLocaleLowerCase()\n  const isCakePool = earningTokenSymbol === 'TTNP' && stakingTokenSymbol === 'TTNP'\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t('Earn TTNP, stake TTNP')\n    }\n    return t('Stake %symbol%', { symbol: stakingTokenSymbol })\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n            {`${getHeadingPrefix()} ${earningTokenSymbol}`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n        <Image src={`/images/pools/${poolImageSrc}`} alt={earningTokenSymbol} width={64} height={64} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useSousApprove } from 'hooks/useApprove'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove, requestedApproval } = useSousApprove(stakingTokenContract, sousId, earningToken.symbol)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap/uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit}\n        decimals={stakingToken.decimals}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', {\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n        })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n      </Flex>\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href={BASE_EXCHANGE_URL}>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            {stakingTokenPrice !== 0 && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={stakedTokenDollarBalance}\n                  prefix=\"~\"\n                  unit=\" USD\"\n                />\n              </Text>\n            )}\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          {reachStakingLimit ? (\n            <span ref={targetRef}>\n              <IconButton variant=\"secondary\" disabled>\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton\n              variant=\"secondary\"\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n              disabled={isFinished}\n            >\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n            </IconButton>\n          )}\n        </Flex>\n        {tooltipVisible && tooltip}\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport {\n  Modal,\n  Text,\n  Button,\n  Heading,\n  Flex,\n  AutoRenewIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { useSousStake } from 'hooks/useStake'\nimport useToast from 'hooks/useToast'\nimport { Token } from 'config/constants/types'\n\ninterface CollectModalProps {\n  formattedBalance: string\n  fullBalance: string\n  earningToken: Token\n  earningsDollarValue: string\n  sousId: number\n  isBnbPool: boolean\n  isCompoundPool?: boolean\n  onDismiss?: () => void\n}\n\nconst CollectModal: React.FC<CollectModalProps> = ({\n  formattedBalance,\n  fullBalance,\n  earningToken,\n  earningsDollarValue,\n  sousId,\n  isBnbPool,\n  isCompoundPool = false,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text mb=\"12px\">{t('Compound: collect and restake TTNP into pool.')}</Text>\n      <Text>{t('Harvest: collect TTNP and send to wallet')}</Text>\n    </>,\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // compounding\n    if (shouldCompound) {\n      try {\n        await onStake(fullBalance, earningToken.decimals)\n        toastSuccess(\n          `${t('Compounded')}!`,\n          t('Your %symbol% earnings have been re-invested into the pool!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      // harvesting\n      try {\n        await onReward()\n        toastSuccess(\n          `${t('Harvested')}!`,\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={`${earningToken.symbol} ${isCompoundPool ? t('Collect') : t('Harvest')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {isCompoundPool && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\n          <ButtonMenu\n            activeIndex={shouldCompound ? 0 : 1}\n            scale=\"sm\"\n            variant=\"subtle\"\n            onItemClick={(index) => setShouldCompound(!index)}\n          >\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\n          </ButtonMenu>\n          <Flex ml=\"10px\" ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </Flex>\n          {tooltipVisible && tooltip}\n        </Flex>\n      )}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\n        <Flex flexDirection=\"column\">\n          <Heading>\n            {formattedBalance} {earningToken.symbol}\n          </Heading>\n          <Text fontSize=\"12px\" color=\"textSubtle\">{`~${earningsDollarValue || 0} USD`}</Text>\n        </Flex>\n      </Flex>\n\n      <Button\n        mt=\"8px\"\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default CollectModal\n","import React from 'react'\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  earningTokenPrice: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  earningTokenPrice,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const hasEarnings = earnings.toNumber() > 0\n  const isCompoundPool = sousId === 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"16px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          {isLoading ? (\n            <Skeleton width=\"80px\" height=\"48px\" />\n          ) : (\n            <>\n              {hasEarnings ? (\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n              ) : (\n                <Heading color=\"textDisabled\">0</Heading>\n              )}\n              {earningTokenPrice !== 0 && (\n                <Text fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                  ~\n                  {hasEarnings ? (\n                    <Balance\n                      display=\"inline\"\n                      fontSize=\"12px\"\n                      color=\"textSubtle\"\n                      decimals={2}\n                      value={earningTokenDollarBalance}\n                      unit=\" USD\"\n                    />\n                  ) : (\n                    '0 USD'\n                  )}\n                </Text>\n              )}\n            </>\n          )}\n        </Flex>\n        <Flex>\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            {isCompoundPool ? t('Collect') : t('Harvest')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${earningToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {t('Earned')}\n              </InlineText>\n            </Box>\n            <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            />\n          </>\n        )}\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} />\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport { CardBody, Flex, Text, CardRibbon } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport AprRow from './AprRow'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n\n  return (\n    <StyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n    >\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasStakedBalance}\n          earningTokenSymbol={earningToken.symbol}\n          stakingTokenSymbol={stakingToken.symbol}\n          isFinished={isFinished && sousId !== 0}\n        />\n        <CardBody>\n          <AprRow pool={pool} />\n          <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <CardActions pool={pool} stakedBalance={stakedBalance} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </CardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from 'hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new TTNP in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new TTNP in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 TTNP or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent TTNP profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isPromoted={{ isDesktop: isXl }}>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningTokenSymbol=\"TTNP\"\n          stakingTokenSymbol=\"TTNP\"\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import React from 'react'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport {\n  ButtonMenu,\n  ButtonMenuItem,\n  Toggle,\n  Text,\n  Flex,\n  NotificationDot,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\n  const { url, isExact } = useRouteMatch()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n\n  const liveOrFinishedSwitch = (\n    <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n      <ButtonMenuItem as={Link} to={`${url}`}>\n        {t('Live')}\n      </ButtonMenuItem>\n      <NotificationDot show={hasStakeInFinishedPools}>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {t('Finished')}\n        </ButtonMenuItem>\n      </NotificationDot>\n    </ButtonMenu>\n  )\n\n  const stakedOnlySwitch = (\n    <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent=\"center\" alignItems=\"center\">\n      <Toggle scale=\"sm\" checked={stakedOnly} onChange={() => setStakedOnly((prev) => !prev)} />\n      <Text ml={['4px', '4px', '8px']}>{t('Staked only')}</Text>\n    </Flex>\n  )\n\n  if (isXs || isSm) {\n    return (\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\" mb=\"24px\">\n        <Flex width=\"100%\" justifyContent=\"space-between\">\n          {viewModeToggle}\n          {liveOrFinishedSwitch}\n        </Flex>\n        {stakedOnlySwitch}\n      </Flex>\n    )\n  }\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent={['space-around', 'space-around', 'flex-start']}\n      mb={['24px', '24px', '24px', '0px']}\n    >\n      {viewModeToggle}\n      {liveOrFinishedSwitch}\n      {stakedOnlySwitch}\n    </Flex>\n  )\n}\n\nexport default PoolTabButtons\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { DEFAULT_GAS_LIMIT } from 'config'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\n\ninterface BountyModalProps {\n  cakeBountyToDisplay: number\n  dollarBountyToDisplay: number\n  totalPendingCakeHarvest: BigNumber\n  callFee: number\n  onDismiss?: () => void\n  TooltipComponent: React.ElementType\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\n\nconst BountyModal: React.FC<BountyModalProps> = ({\n  cakeBountyToDisplay,\n  dollarBountyToDisplay,\n  totalPendingCakeHarvest,\n  callFee,\n  onDismiss,\n  TooltipComponent,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { theme } = useTheme()\n  const { toastError, toastSuccess } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const [pendingTx, setPendingTx] = useState(false)\n  const callFeeAsDecimal = callFee / 100\n  const totalYieldToDisplay = getBalanceNumber(totalPendingCakeHarvest, 18)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom',\n    tooltipPadding: { right: 15 },\n  })\n\n  const handleConfirmClick = async () => {\n    cakeVaultContract.methods\n      .harvest()\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Bounty collected!'), t('TTNP bounty has been sent to your wallet.'))\n        setPendingTx(false)\n        onDismiss()\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(\n          t('Could not be collected'),\n          t('There may be an issue with your transaction, or another user claimed the bounty first.'),\n        )\n        setPendingTx(false)\n        onDismiss()\n      })\n  }\n\n  return (\n    <Modal title={t('Claim Bounty')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      {tooltipVisible && tooltip}\n      <Flex alignItems=\"flex-start\" justifyContent=\"space-between\">\n        <Text>{t('You’ll claim')}</Text>\n        <Flex flexDirection=\"column\">\n          <Balance bold value={cakeBountyToDisplay} decimals={7} unit=\" TTNP\" />\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            <Balance\n              fontSize=\"12px\"\n              color=\"textSubtle\"\n              value={dollarBountyToDisplay}\n              decimals={2}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Text>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {t('Pool total pending yield')}\n        </Text>\n        <Balance color=\"textSubtle\" value={totalYieldToDisplay} unit=\" TTNP\" />\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {t('Bounty')}\n        </Text>\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {callFeeAsDecimal}%\n        </Text>\n      </Flex>\n      {account ? (\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleConfirmClick}\n          mb=\"28px\"\n        >\n          {t('Confirm')}\n        </Button>\n      ) : (\n        <UnlockButton mb=\"28px\" />\n      )}\n      <Flex justifyContent=\"center\" alignItems=\"center\">\n        <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\n          {t('What’s this?')}\n        </Text>\n        <span ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </span>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default BountyModal\n","import React, { useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Text,\n  Flex,\n  HelpIcon,\n  Button,\n  Heading,\n  Skeleton,\n  useModal,\n  Box,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport BountyModal from './BountyModal'\n\nconst StyledCard = styled(Card)`\n  border: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  width: 100%;\n  flex: 1;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 240px;\n  }\n`\n\nconst BountyCard = () => {\n  const { t } = useTranslation()\n  const {\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: { callFee },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n\n  const estimatedDollarBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\n  }, [cakePriceBusd, estimatedCakeBountyReward])\n\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\n\n  const TooltipComponent = () => (\n    <>\n      <Text mb=\"16px\">{t('This bounty is given as a reward for providing a service to other users.')}</Text>\n      <Text mb=\"16px\">\n        {t(\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto TTNP Pool’s compounding function for everyone.',\n        )}\n      </Text>\n      <Text style={{ fontWeight: 'bold' }}>\n        {t('Auto-Compound Bounty: %fee%% of all Auto Fswa[] pool users pending yield', { fee: callFee / 100 })}\n      </Text>\n    </>\n  )\n\n  const [onPresentBountyModal] = useModal(\n    <BountyModal\n      cakeBountyToDisplay={cakeBountyToDisplay}\n      dollarBountyToDisplay={dollarBountyToDisplay}\n      totalPendingCakeHarvest={totalPendingCakeHarvest}\n      callFee={callFee}\n      TooltipComponent={TooltipComponent}\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <StyledCard>\n        <CardBody>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb=\"12px\">\n              <Text fontSize=\"16px\" bold color=\"textSubtle\" mr=\"4px\">\n                {t('Auto TTNP Bounty')}\n              </Text>\n              <Box ref={targetRef}>\n                <HelpIcon color=\"textSubtle\" />\n              </Box>\n            </Flex>\n          </Flex>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Flex flexDirection=\"column\" mr=\"12px\">\n              <Heading>\n                {hasFetchedCakeBounty ? (\n                  <Balance fontSize=\"20px\" bold value={cakeBountyToDisplay} decimals={3} />\n                ) : (\n                  <Skeleton height={20} width={96} mb=\"2px\" />\n                )}\n              </Heading>\n              {hasFetchedDollarBounty ? (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  value={dollarBountyToDisplay}\n                  decimals={2}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              ) : (\n                <Skeleton height={16} width={62} />\n              )}\n            </Flex>\n            <Button\n              disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\n              onClick={onPresentBountyModal}\n              scale=\"sm\"\n            >\n              {t('Claim')}\n            </Button>\n          </Flex>\n        </CardBody>\n      </StyledCard>\n    </>\n  )\n}\n\nexport default BountyCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, HelpIcon, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ButtonText = styled(Text)`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.xs} {\n    display: block;\n  }\n`\n\nconst StyledLink = styled(Link)`\n  margin-right: 16px;\n  display: flex;\n  justify-content: flex-end;\n\n  &:hover {\n    text-decoration: none;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1;\n  }\n`\n\nconst HelpButton = () => {\n  const { t } = useTranslation()\n  return (\n    <StyledLink external href=\"https://bridgeswap-exchange-1.gitbook.io/bridgeswap/core-products/pools\">\n      <Button px={['14px', null, null, null, '20px']} variant=\"subtle\">\n        <ButtonText color=\"backgroundAlt\" bold fontSize=\"16px\">\n          {t('Help')}\n        </ButtonText>\n        <HelpIcon color=\"backgroundAlt\" ml={[null, null, null, 0, '6px']} />\n      </Button>\n    </StyledLink>\n  )\n}\n\nexport default HelpButton\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, Image, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n  const iconFile = `${earningTokenSymbol}-${stakingTokenSymbol}.svg`.toLocaleLowerCase()\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto TTNP')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual TTNP')\n    subtitle = `${t('Earn')} TTNP ${t('Stake').toLocaleLowerCase()} TTNP`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <Image src={`/images/pools/${iconFile}`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto TTNP vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto TTNP vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent TTNP profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" TTNP\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                    prefix=\"~\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport { Flex, useModal, CalculateIcon, IconButton, Skeleton, FlexProps } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprProps extends FlexProps {\n  pool: Pool\n  showIcon: boolean\n  performanceFee?: number\n}\n\nconst Apr: React.FC<AprProps> = ({ pool, showIcon, performanceFee = 0, ...props }) => {\n  const { stakingToken, earningToken, isFinished, earningTokenPrice, apr } = pool\n  const { t } = useTranslation()\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  const openRoiModal = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {earningsPercentageToDisplay || isFinished ? (\n        <>\n          <Flex>\n            <Balance\n              onClick={openRoiModal}\n              fontSize=\"16px\"\n              isDisabled={isFinished}\n              value={isFinished ? 0 : earningsPercentageToDisplay}\n              decimals={2}\n              unit=\"%\"\n            />\n          </Flex>\n          {!isFinished && showIcon && (\n            <Flex>\n              <IconButton\n                onClick={openRoiModal}\n                variant=\"text\"\n                width=\"20px\"\n                height=\"20px\"\n                mr={['-14px', '-14px', '0px']}\n              >\n                <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n              </IconButton>\n            </Flex>\n          )}\n        </>\n      ) : (\n        <Skeleton width=\"80px\" height=\"16px\" />\n      )}\n    </Flex>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr\n          pool={pool}\n          performanceFee={isAutoVault ? performanceFee : 0}\n          showIcon={!isXs && !isSm}\n          alignItems=\"flex-start\"\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStakedBalance ? (\n          <Flex height=\"100%\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link external href={getBscScanBlockCountdownUrl(endBlock)} onClick={(e) => e.stopPropagation()}>\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport { Button, Text, useModal, Flex, TooltipText, useTooltip, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { PoolCategory } from 'config/constants/types'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\nimport UnstakingFeeCountdownRow from '../../CakeVaultCard/UnstakingFeeCountdownRow'\n\ninterface HarvestActionProps extends Pool {\n  userDataLoaded: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\n  sousId,\n  poolCategory,\n  earningToken,\n  userData,\n  userDataLoaded,\n  isAutoVault,\n  earningTokenPrice,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto TTNP vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isCompoundPool = sousId === 0\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto TTNP vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    pricePerFullShare,\n    fees: { performanceFee },\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const displayBalance = hasEarnings ? earningTokenBalance : 0\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const actionTitle = isAutoVault ? (\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n      {t('Recent TTNP profit')}\n    </Text>\n  ) : (\n    <>\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n        {earningToken.symbol}{' '}\n      </Text>\n      <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n        {t('Earned')}\n      </Text>\n    </>\n  )\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Balance pt=\"8px\" lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={0} />\n          <Button disabled>{isCompoundPool ? t('Collect') : t('Harvest')}</Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={displayBalance} />\n          {hasEarnings ? (\n            <Balance\n              display=\"inline\"\n              fontSize=\"12px\"\n              color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n              decimals={2}\n              value={earningTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          ) : (\n            <Text fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n              0 USD\n            </Text>\n          )}\n        </Flex>\n        {isAutoVault ? (\n          <Flex flex=\"1.3\" flexDirection=\"column\" alignSelf=\"flex-start\" alignItems=\"flex-start\">\n            <UnstakingFeeCountdownRow isTableVariant />\n            <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n              {tooltipVisible && tooltip}\n              <TooltipText ref={targetRef} small>\n                {t('Performance Fee')}\n              </TooltipText>\n              <Flex alignItems=\"center\">\n                <Text ml=\"4px\" small>\n                  {performanceFee / 100}%\n                </Text>\n              </Flex>\n            </Flex>\n          </Flex>\n        ) : (\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            {isCompoundPool ? t('Collect') : t('Harvest')}\n          </Button>\n        )}\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_URL } from 'config'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const { sousId, stakingToken, earningToken, totalStaked, endBlock, stakingLimit, isAutoVault } = pool\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanBlockCountdownUrl(endBlock)}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://bridgeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('Info site')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('Project site')}\n          </LinkExternal>\n        </Flex>\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} TTNP ${t('Stake').toLocaleLowerCase()} CAKE`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\nimport { latinise } from 'utils/latinise'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`\n\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n    return [cakeAutoVault, ...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  const poolsToShow = () => {\n    let chosenPools = []\n    if (showFinishedPools) {\n      chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    } else {\n      chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n    }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      chosenPools = chosenPools.filter((pool) =>\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n      )\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  }\n\n  const cardLayout = (\n    <CardLayout>\n      {poolsToShow().map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\n        ),\n      )}\n    </CardLayout>\n  )\n  \n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"24px\">\n              {t('Pools')}\n            </Heading>\n            {/* <Heading scale=\"md\" color=\"text\">\n              {t('Stake your Tokens to Earn.')}\n            </Heading> */}\n            <Text color=\"text\">\n              {t('Stake your Tokens to Earn.')}\n            </Text>\n            {/* <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading> */}\n          </Flex>\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\n            <HelpButton />\n            <BountyCard />\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolControls justifyContent=\"space-between\">\n          <PoolTabButtons\n            stakedOnly={stakedOnly}\n            setStakedOnly={setStakedOnly}\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\n            viewMode={viewMode}\n            setViewMode={setViewMode}\n          />\n          <SearchSortContainer>\n            <Flex flexDirection=\"column\" width=\"50%\">\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Sort by')}\n              </Text>\n              <ControlStretch>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APR'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Total staked'),\n                      value: 'totalStaked',\n                    },\n                  ]}\n                  onChange={handleSortOptionChange}\n                />\n              </ControlStretch>\n            </Flex>\n            <Flex flexDirection=\"column\" width=\"50%\">\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Search')}\n              </Text>\n              <ControlStretch>\n                <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\n              </ControlStretch>\n            </Flex>\n          </SearchSortContainer>\n        </PoolControls>\n        {showFinishedPools && (\n          <Text fontSize=\"20px\" color=\"failure\" pb=\"32px\">\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n          </Text>\n        )}\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\n        <div ref={loadMoreRef} />\n        \n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n"],"sourceRoot":""}