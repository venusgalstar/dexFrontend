{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","hooks/useBuyLottery.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","utils/getBrisBalance.ts","hooks/useGetBrisBalance.ts","utils/lotteryUtils.ts"],"names":["useIfoV1Contract","address","web3","useWeb3","useMemo","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","useERC721","getErc721Contract","useCake","getCakeContract","useBRIS","useBunnyFactory","getBunnyFactoryContract","useProfile","getProfileContract","useLottery","getLotteryContract","useNewLottery","getNewLotteryContract","useLotteryTicket","getLotteryTicketContract","useReferralContract","getReferralContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","usePointCenterIfoContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useClaimRefundContract","getClaimRefundContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","usePredictionsContract","getPredictionsContract","useChainlinkOracleContract","getChainlinkOracleContract","library","useWeb3React","refEth","useRef","useState","Web3","getWeb3NoAccount","setweb3","useEffect","current","useBuyTicketsLottery","account","lotteryContract","onBuyTickets","useCallback","lotteryid","numbers","a","buyTickets","txHash","useCurrentLotteryId","lotteryId","setLotteryId","fetchLottery","getLotteryId","useLotteryInfo","onViewLottery","getLotteryInfo","lottery","useAccountTickets","onAccountTickets","getAccountTickets","accountTickets","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenAdornmentWrapper","StyledMaxText","primary","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onChange","onSelectMax","value","t","useTranslation","alignItems","type","inputMode","min","placeholder","scale","onClick","num","toLocaleString","Tips","BuyTicketModal","amount","onDismiss","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","getBalanceNumber","maxTickets","parseInt","getFullDisplayBalance","LOTTERY_TICKET_PRICE","handleBuy","Array","apply","Math","floor","random","toString","console","error","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","title","e","currentTarget","validity","valid","toUpperCase","lotteryPrice","Announce","Final","width","variant","disabled","isInteger","getBrisBalance","BRISContract","methods","balanceOf","call","useBrisBalance","balance","setBalance","BrisContract","fetchBalance","brisNum","multiCall","abi","calls","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","res","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","BigNumber","times","DEFAULT_TOKEN_DECIMAL","send","from","on","tx","transactionHash","viewLottery","lotteryinfo","getUserTickets","userTickets","currentLotteryId","currentLotteryid","getTicketsAmount","ticketsContract","multiClaim","issueIndex","calls1","options","ticketAbi","tokenIds","calls2","claimedStatus","unClaimedIds","filter","calls3","lotteryAbi","rewards","finalTokenIds","forEach","r","push","getMax","maxNumber","getLotteryIssueIndex"],"mappings":"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","file":"static/js/2.9d6216f3.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBRISContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getReferralContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getNewLotteryContract\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n// CAKE and TTNP are the same\nexport const useBRIS = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useNewLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getNewLotteryContract(web3), [web3])\n}\n\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useReferralContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getReferralContract(web3), [web3])\n}\n\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useNewLottery, useLottery, useLotteryTicket } from 'hooks/useContract'\n\nimport { multiClaim, getMax, getLotteryInfo, getLotteryId, multiBuy, buyTickets, getAccountTickets } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useBuyTicketsLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useNewLottery()\n\n  const handleBuy = useCallback(\n    async (lotteryid: string, numbers: Array<any>) => {\n      try {\n        const txHash = await buyTickets(lotteryContract, lotteryid, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onBuyTickets: handleBuy }\n}\n\nexport const useCurrentLotteryId = () => {\n  const lotteryContract = useNewLottery()\n  const [lotteryId, setLotteryId] = useState(0)\n\n  const fetchLottery = useCallback(async () => {\n    const lotteryid = await getLotteryId(lotteryContract)\n    setLotteryId(lotteryid)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchLottery()\n    }\n  }, [lotteryContract, fetchLottery])\n\n  return lotteryId\n}\n\nexport const useLotteryInfo = () => {\n  const lotteryContract = useNewLottery()\n\n  const fetchLotteryInfo = useCallback(async (lotteryid: string) => {\n    try {\n      const lottery = await getLotteryInfo(lotteryContract, lotteryid)\n      return lottery\n    } catch (e) {\n      return false\n    }\n  }, [lotteryContract])\n\n  return { onViewLottery: fetchLotteryInfo }\n}\n\nexport const useAccountTickets = () => {\n  const lotteryContract = useNewLottery()\n  const { account } = useWeb3React()\n\n  const fetchAccountTickets = useCallback(async (lotteryid: string) => {\n    try {\n      const accountTickets = await getAccountTickets(lotteryContract, account, lotteryid)\n      return accountTickets\n    } catch (e) {\n      return false\n    }\n  }, [lotteryContract, account])\n\n  return { onAccountTickets: fetchAccountTickets }\n}\n\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  value: string\n  onSelectMax?: () => void\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Flex alignItems=\"center\">\n        <Input type=\"number\" inputMode=\"numeric\" min=\"0\" onChange={onChange} placeholder=\"0\" value={value} />\n        <StyledTokenAdornmentWrapper>\n          <StyledSpacer />\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n          <StyledSpacer />\n          <Button scale=\"sm\" onClick={onSelectMax}>\n            {t('Max')}\n          </Button>\n        </StyledTokenAdornmentWrapper>\n      </Flex>\n      <StyledMaxText>\n        {t('%num% %symbol% Available', { num: max.toLocaleString(), symbol: availableSymbol })}\n      </StyledMaxText>\n    </>\n  )\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber, useCurrentLotteryId, useBuyTicketsLottery } from 'hooks/useBuyLottery'\nimport { useTranslation } from 'contexts/Localization'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onDismiss?: () => void\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getBalanceNumber(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value)\n    }\n  }\n\n  // const { onMultiBuy } = useMultiBuyLottery()\n  // const maxNumber = useMaxNumber()\n  const { onBuyTickets } = useBuyTicketsLottery()\n  const lotteryid = useCurrentLotteryId()\n\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      // const numbers = Array.apply(null, { length }).map(() => [\n      //   Math.floor(Math.random() * maxNumber) + 1,\n      //   Math.floor(Math.random() * maxNumber) + 1,\n      //   Math.floor(Math.random() * maxNumber) + 1,\n      //   Math.floor(Math.random() * maxNumber) + 1,\n      // ])\n      \n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() =>\n        Math.floor(Math.random() * 10).toString() + \n        Math.floor(Math.random() * 10).toString() + \n        Math.floor(Math.random() * 10).toString() + \n        Math.floor(Math.random() * 10).toString() + \n        Math.floor(Math.random() * 10).toString() + \n        Math.floor(Math.random() * 10).toString()\n      )\n\n      const txHash = await onBuyTickets(lotteryid.toString(), numbers)\n      // const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onBuyTickets, setRequestedBuy, val, lotteryid])\n  // [onMultiBuy, setRequestedBuy, maxNumber, val]\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={t('Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={t('Ticket').toUpperCase()}\n        availableSymbol=\"TTNP\"\n      />\n      <div>\n        <Tips>{t('1 Ticket = %lotteryPrice% TTNP', { lotteryPrice: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {t('Ticket purchases are final. Your TTNP cannot be returned to you after buying tickets.')}\n        </Announce>\n        <Final>{t('You will spend: %num% TTNP', { num: cakeCosts(val) })}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          disabled={\n            pendingTx ||\n            !Number.isInteger(parseInt(val)) ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n","const getBrisBalance = async (BRISContract, account) => {\n    return BRISContract.methods.balanceOf(account).call()\n}\n\nexport default getBrisBalance","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useBRIS } from 'hooks/useContract'\nimport getBrisBalance from 'utils/getBrisBalance'\n\nconst useBrisBalance = () => {\n    const { account } = useWeb3React()\n    const [balance, setBalance] = useState(0)\n    const BrisContract = useBRIS()\n\n    const fetchBalance = useCallback(async () => {\n        try {\n            const brisNum = await getBrisBalance(BrisContract, account)\n            setBalance(brisNum)\n        } catch (error) {\n            console.error(error)\n        }\n    }, [BrisContract, account])\n    \n    useEffect(() => {\n        if (BrisContract) {\n          fetchBalance()\n        }\n    }, [BrisContract, fetchBalance])\n    \n    return balance\n}\n\nexport default useBrisBalance","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { getMulticallAddress } from './addressHelpers'\nimport { BIG_ZERO } from './bigNumber'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3NoAccount()\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getLotteryInfo = async (lotteryContract, lotteryid) => {\n  const lotteryinfo = await lotteryContract.methods.viewLottery(lotteryid).call()\n  return lotteryinfo\n}\n\nexport const buyTickets = async (lotteryContract, lotteryid, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .buyTickets(lotteryid, numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getAccountTickets = async (lotteryContract, account, lotteryid) => {\n  const userTickets = await lotteryContract.methods.getUserTickets(account, lotteryid).call()\n  return userTickets\n}\n\nexport const getLotteryId = async (lotteryContract) => {\n  const currentLotteryid = await lotteryContract.methods.currentLotteryId().call()\n  return currentLotteryid\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finalTokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO)\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BIG_ZERO\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\n\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber()\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n"],"sourceRoot":""}