{"version":3,"sources":["views/Profile/ProfileCreation/UserName.tsx","views/Profile/ProfileCreation/config.ts","views/Profile/ProfileCreation/contexts/ProfileCreationProvider.tsx","views/Profile/ProfileCreation/Header.tsx","views/Profile/components/WalletNotConnected.tsx","hooks/useHasCakeBalance.ts","views/Profile/components/SelectionCard.tsx","views/Profile/components/NextStepButton.tsx","views/Profile/ProfileCreation/contexts/hook.ts","views/Profile/ProfileCreation/Mint.tsx","views/Profile/ProfileCreation/ProfilePicture.tsx","views/Profile/ProfileCreation/TeamSelection.tsx","views/Profile/components/ConfirmProfileCreationModal.tsx","views/Profile/components/EditProfileModal/reducer.ts","views/Profile/ProfileCreation/Steps.tsx","views/Profile/ProfileCreation/index.tsx","views/Profile/components/ClaimGiftModal.tsx","hooks/useGetProfileCosts.ts","views/Profile/components/EditProfileModal/StartView.tsx","views/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Profile/components/EditProfileModal/index.tsx","views/Profile/components/Header.tsx","views/Profile/components/AchievementAvatar.tsx","views/Profile/components/AchievementTitle.tsx","views/Profile/components/AchievementDescription.tsx","views/Profile/components/AchievementCard.tsx","views/Profile/components/AchievementsList.tsx","views/Profile/components/ActionColumn.tsx","views/Profile/components/AchievementRow/PointsLabel.tsx","views/Profile/components/AchievementRow/index.tsx","views/Profile/components/ClaimPointsCallout .tsx","views/Profile/components/Menu.tsx","views/Profile/TaskCenter.tsx","views/Profile/components/CardHeader.tsx","views/Profile/components/CollectibleCard.tsx","views/Profile/components/Collectibles.tsx","views/Profile/components/EditProfileAvatar.tsx","views/Profile/PublicProfile.tsx","views/Profile/index.tsx","hooks/useContract.ts","hooks/useWeb3.ts","utils/bscscan.ts","components/UnlockButton.tsx","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTokenBalance.ts","hooks/usePersistState.ts","views/Profile/components/ApproveConfirmButtons.tsx","hooks/useApproveConfirmTransaction.ts","views/Profile/components/HeaderWrapper.tsx","views/Profile/components/ProfileAvatar.tsx","views/Profile/components/ComingSoon.tsx","views/Profile/components/SecondaryCard.tsx","views/Profile/components/StatBox.tsx"],"names":["ExistingUserState","REGISTER_COST","STARTER_BUNNY_IDENTIFIERS","initialState","isInitialized","currentStep","teamId","selectedNft","nftAddress","tokenId","userName","minimumCakeRequired","BigNumber","MINT_COST","multipliedBy","DEFAULT_TOKEN_DECIMAL","allowance","totalCost","reducer","state","action","type","step","ProfileCreationContext","createContext","ProfileCreationProvider","children","useReducer","dispatch","account","useWeb3React","useEffect","isSubscribed","a","bunnyFactoryContract","getBunnyFactoryContract","methods","canMint","call","fetchData","actions","useMemo","nextStep","setTeamId","setSelectedNft","setUserName","Provider","value","Wrapper","styled","div","theme","colors","textSubtle","steps","Header","t","useTranslation","useContext","as","scale","color","mb","map","translationKey","index","WalletNotConnected","UnlockButton","useHasCakeBalance","minimumBalance","useTokenBalance","getCakeAddress","balance","gte","StyledCard","Card","isSuccess","Label","label","isDisabled","Body","tertiary","Children","StyledBackgroundImage","src","SelectionCard","name","isChecked","image","onChange","disabled","props","checked","e","target","style","flex","NextStepButton","endIcon","useProfileCreation","nfts","nftList","filter","nft","includes","identifier","minimumCakeBalanceToMint","Mint","useState","variationId","setVariationId","cakeContract","useCake","useBunnyFactory","hasMinimumCakeRequired","useApproveConfirmTransaction","onRequiresApproval","options","address","response","currentAllowance","onApprove","approve","toJSON","send","from","onConfirm","mintNFT","onSuccess","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","fontSize","bold","num","images","md","Number","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","onClick","Link","RouterLink","primary","NftWrapper","ProfilePicture","setIsApproved","setIsApproving","useGetCollectibles","isLoading","nftsInWallet","tokenIds","contract","useERC721","toastError","useToast","length","to","marginLeft","height","walletNft","firstTokenId","getAddressByType","parseInt","getPancakeProfileAddress","once","error","message","spin","undefined","Team","currentTeamId","teams","useTeams","handleTeamSelection","teamValues","shuffle","Object","values","team","id","isJoinable","mr","users","toLocaleString","ConfirmProfileCreationModal","onDismiss","profileContract","useProfile","useAppDispatch","toastSuccess","createProfile","fetchProfile","title","justifyContent","Views","profileApiUrl","process","minimumCakeToRegister","InputWrap","Input","UIKitInput","Indicator","Flex","UserName","isAcknowledged","setIsAcknowledged","library","web3","useWeb3","IDLE","existingUserState","setExistingUserState","isValid","setIsValid","setIsLoading","setMessage","useModal","onPresentConfirmProfileCreation","isUserCreated","CREATED","checkUsernameValidity","debounce","fetch","res","ok","json","data","bnbSign","signature","eth","personal","sign","utils","utf8ToHex","method","headers","body","JSON","stringify","username","dateCreated","formatDistance","parseISO","created_at","Date","NEW","fetchUser","width","event","isWarning","minLength","maxLength","placeholder","py","minHeight","htmlFor","display","cursor","marginBottom","alignItems","ml","mt","Steps","TeamSelection","ProfileCreation","Page","useCanClaim","canClaim","setCanClaim","refresh","setRefresh","checkClaimStatus","useCallback","prevRefresh","claimRefundContract","getClaimRefundContract","walletCanClaim","fetchClaimStatus","ClaimGift","setIsConfirming","useClaimRefundContract","maxWidth","getCakeBack","on","currentView","view","previousView","useEditProfile","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","numberCakeToReactivate","BIG_ZERO","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","getProfileContract","makeBatchRequest","fetchCosts","DangerOutline","Button","attrs","variant","failure","AvatarWrapper","mediaQueries","sm","StartPage","needsApproval","setNeedsApproval","profile","isActive","cost","lt","checkApprovalStatus","flexDirection","ProfileAvatar","minimum","getFullDisplayBalance","PauseProfilePage","pancakeProfileContract","useProfileContract","getBalanceNumber","pauseProfile","ChangeProfilePicPage","updateProfile","reactivateProfile","ApproveCakePage","times","viewTitle","EditProfileModal","isStartView","handleBack","onBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","ProfileHeader","onPresentClaimGiftModal","onEditProfileModal","hasProfile","HeaderWrapper","startIcon","NoBadgePlaceholder","BunnyPlaceholderIcon","StyledAchievementAvatar","img","AchievementAvatar","badge","alt","AchievementTitle","key","Description","Text","AchievementDescription","description","Details","AchievementCard","achievement","points","Grid","AchievementsList","achievements","useAchievements","ActionColumn","PointsLabel","localePoints","StyledAchievementRow","cardBorder","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","px","getPoints","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","prevClaimableAchievement","totalPointsToCollect","sumBy","Menu","activeIndex","TaskCenter","ComingSoon","CardHeader","UIKitCardHeader","isDark","getBackground","PreviewImage","CollectibleCard","lg","CollectibleList","Collectibles","nftInWallet","p","EditOverlay","StyledEditProfileAvatar","EditProfileAvatar","Content","Username","Heading","Status","ResponsiveText","AddressLink","Section","PublicProfile","usePersistState","localStorageKey","usernameVisibilityToggled","setUsernameVisibility","Icon","VisibilityOff","VisibilityOn","replace","href","getBscScanAddressUrl","external","outline","StatBox","icon","PrizeIcon","subtitle","Profile","useFetchAchievements","PageLoader","exact","path","useIfoV1Contract","getIfoV1Contract","useIfoV2Contract","getIfoV2Contract","useERC20","getBep20Contract","getErc721Contract","getCakeContract","useBRIS","useLottery","getLotteryContract","useNewLottery","getNewLotteryContract","useLotteryTicket","getLotteryTicketContract","useReferralContract","getReferralContract","useMasterchef","getMasterchefContract","useSousChef","getSouschefContract","getPointCenterIfoContract","useBunnySpecialContract","getBunnySpecialContract","useTradingCompetitionContract","getTradingCompetitionContract","useEasterNftContract","getEasterNftContract","useCakeVaultContract","getCakeVaultContract","usePredictionsContract","getPredictionsContract","useChainlinkOracleContract","getChainlinkOracleContract","refEth","useRef","Web3","getWeb3NoAccount","setweb3","current","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","useAuth","login","logout","onPresentConnectModal","useWalletModal","useLastUpdated","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","ref","FetchStatus","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","balanceOf","fetchBalance","useGetBnbBalance","getBalance","walletBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","prev","defaultOptions","hydrate","identity","dehydrate","initialValue","userOptions","valueFromLS","localStorage","getItem","parse","setValue","setItem","ButtonArrangement","StyledApproveConfirmButtonRow","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","approvalState","approvalReceipt","approvalError","confirmState","confirmReceipt","confirmError","payload","noop","onApproveSuccess","handlePreApprove","then","result","TeamAvatar","card","background","bg","AvatarInactive","NoProfileAvatarIcon","SecondaryCard","defaultProps","textTransform"],"mappings":"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","file":"static/js/11.4653e23c.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from '@pancakeswap/uikit'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useTranslation } from 'contexts/Localization'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport debounce from 'lodash/debounce'\nimport ConfirmProfileCreationModal from '../components/ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst profileApiUrl = process.env.REACT_APP_API_PROFILE\nconst minimumCakeToRegister = new BigNumber(REGISTER_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL)\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const { t } = useTranslation()\n  const { account, library } = useWeb3React()\n  const { toastError } = useToast()\n  const web3 = useWeb3()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeToRegister)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      selectedNft={selectedNft}\n      account={account}\n      teamId={teamId}\n      minimumCakeRequired={minimumCakeRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const checkUsernameValidity = debounce(async (value: string) => {\n    try {\n      setIsLoading(true)\n      const res = await fetch(`${profileApiUrl}/api/users/valid/${value}`)\n\n      if (res.ok) {\n        setIsValid(true)\n        setMessage('')\n      } else {\n        const data = await res.json()\n        setIsValid(false)\n        setMessage(data?.error?.message)\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }, 200)\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n    checkUsernameValidity(value)\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n\n      const signature = library?.bnbSign\n        ? (await library.bnbSign(account, userName))?.signature\n        : // web3.utils.utf8ToHex(\"...\") will not be called here on username if hex like string\n          // https://github.com/ChainSafe/web3.js/blob/5d027191c5cb7ffbcd44083528bdab19b4e14744/packages/web3-core-helpers/src/formatters.js#L225\n          // Last param is the password, and is null to request a signature in the wallet\n          await web3.eth.personal.sign(web3.utils.utf8ToHex(userName), account, null)\n\n      const response = await fetch(`${profileApiUrl}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n        }),\n      })\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(t('Error'), data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\n\n  // Perform an initial check to see if the wallet has already created a username\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${profileApiUrl}/api/users/${account}`)\n        const data = await response.json()\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\n\n          actions.setUserName(data.username)\n          setExistingUserState(ExistingUserState.CREATED)\n          setIsValid(true)\n        } else {\n          setExistingUserState(ExistingUserState.NEW)\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Unable to verify username'))\n      }\n    }\n\n    if (account) {\n      fetchUser()\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 4 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={t('Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\n            {t(\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\n              </div>\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {t('Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button onClick={onPresentConfirmProfileCreation} disabled={!isValid || !isUserCreated}>\n        {t('Complete Profile')}\n      </Button>\n      {!hasMinimumCakeRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {t('A minimum of %num% BRIS is required', { num: REGISTER_COST })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n","export const MINT_COST = 1\nexport const REGISTER_COST = 0.5\nexport const ALLOWANCE_MULTIPLIER = 5\nexport const STARTER_BUNNY_IDENTIFIERS = ['sleepy', 'dollop', 'twinkle', 'churro', 'sunny']\nexport const USERNAME_MIN_LENGTH = 3\nexport const USERNAME_MAX_LENGTH = 15\n","import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST + REGISTER_COST\nconst allowance = totalCost * ALLOWANCE_MULTIPLIER\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  selectedNft: {\n    nftAddress: null,\n    tokenId: null,\n  },\n  userName: '',\n  minimumCakeRequired: new BigNumber(totalCost).multipliedBy(DEFAULT_TOKEN_DECIMAL),\n  allowance: new BigNumber(allowance).multipliedBy(DEFAULT_TOKEN_DECIMAL),\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_selected_nft':\n      return {\n        ...state,\n        selectedNft: {\n          tokenId: action.tokenId,\n          nftAddress: action.nftAddress,\n        },\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.methods.canMint(account).call()\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setSelectedNft: (tokenId: number, nftAddress: string) =>\n        dispatch({ type: 'set_selected_nft', tokenId, nftAddress }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Breadcrumbs, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Wrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nconst steps = ['Get Starter Collectible', 'Set Profile Picture', 'Join Team', 'Set Name']\n\nconst Header: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentStep } = useContext(ProfileCreationContext)\n\n  return (\n    <Wrapper>\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"8px\">\n        {t('Profile Setup')}\n      </Heading>\n      <Heading as=\"h2\" scale=\"lg\" mb=\"8px\">\n        {t('Show off your stats and collectibles with your unique profile')}\n      </Heading>\n      <Text color=\"textSubtle\" mb=\"24px\">\n        {t('Total cost: 1.5 CAKE')}\n      </Text>\n      <Breadcrumbs>\n        {steps.map((translationKey, index) => {\n          return (\n            <Text key={translationKey} color={index <= currentStep ? 'text' : 'textDisabled'}>\n              {t(translationKey)}\n            </Text>\n          )\n        })}\n      </Breadcrumbs>\n    </Wrapper>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\n\nconst WalletNotConnected = () => {\n  const { t } = useTranslation()\n\n  return (\n    <div>\n      <Heading scale=\"xl\" mb=\"8px\">\n        {t('Oops!')}\n      </Heading>\n      <Text as=\"p\" mb=\"16px\">\n        {t('Please connect your wallet to continue')}\n      </Text>\n      <UnlockButton />\n    </div>\n  )\n}\n\nexport default WalletNotConnected\n","import BigNumber from 'bignumber.js'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useTokenBalance from './useTokenBalance'\n\n/**\n * A hook to check if a wallet's BRIS balance is at least the amount passed in\n */\nconst useHasCakeBalance = (minimumBalance: BigNumber) => {\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  return cakeBalance.gte(minimumBalance)\n}\n\nexport default useHasCakeBalance\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst StyledCard = styled(Card)`\n  ${({ isSuccess }) => !isSuccess && 'box-shadow: none;'}\n  border-radius: 16px;\n  margin-bottom: 16px;\n`\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px 0 0 16px;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <StyledCard isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </StyledCard>\n  )\n}\n\nexport default SelectionCard\n","import React from 'react'\nimport { ArrowForwardIcon, Button, ButtonProps } from '@pancakeswap/uikit'\n\nconst NextStepButton: React.FC<ButtonProps> = (props) => {\n  return <Button endIcon={<ArrowForwardIcon color=\"currentColor\" />} {...props} />\n}\n\nexport default NextStepButton\n","import { useContext } from 'react'\nimport { ProfileCreationContext } from './ProfileCreationProvider'\n\nconst useProfileCreation = () => {\n  return useContext(ProfileCreationContext)\n}\n\nexport default useProfileCreation\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { Nft } from 'config/constants/types'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport nftList from 'config/constants/nfts'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_BUNNY_IDENTIFIERS } from './config'\n\nconst nfts = nftList.filter((nft) => STARTER_BUNNY_IDENTIFIERS.includes(nft.identifier))\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL)\n\nconst Mint: React.FC = () => {\n  const [variationId, setVariationId] = useState<Nft['variationId']>(null)\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint)\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.methods.allowance(account, bunnyFactoryContract.options.address).call()\n          const currentAllowance = new BigNumber(response)\n          return currentAllowance.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return cakeContract.methods\n          .approve(bunnyFactoryContract.options.address, allowance.toJSON())\n          .send({ from: account })\n      },\n      onConfirm: () => {\n        return bunnyFactoryContract.methods.mintNFT(variationId).send({ from: account })\n      },\n      onSuccess: () => actions.nextStep(),\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% CAKE', { num: MINT_COST })}\n          </Text>\n          {nfts.map((nft) => {\n            const handleChange = (value: string) => setVariationId(Number(value))\n\n            return (\n              <SelectionCard\n                key={nft.identifier}\n                name=\"mintStarter\"\n                value={nft.variationId}\n                image={`/images/nfts/${nft.images.md}`}\n                isChecked={variationId === nft.variationId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% BRIS is required', { num: MINT_COST })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={variationId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n","import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAddressByType } from 'utils/collectibles'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCollectibles } from 'state/hooks'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n  const { t } = useTranslation()\n  const { isLoading, nftsInWallet, tokenIds } = useGetCollectibles()\n  const contract = useERC721(selectedNft.nftAddress)\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n\n  const handleApprove = () => {\n    contract.methods\n      .approve(getPancakeProfileAddress(), selectedNft.tokenId)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsApproving(true)\n      })\n      .once('receipt', () => {\n        setIsApproving(false)\n        setIsApproved(true)\n      })\n      .once('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsApproving(false)\n      })\n  }\n\n  if (!isLoading && nftsInWallet.length === 0) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 2 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Pancake Collectibles can be used.')}\n            <Link to=\"/collectibles\" style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {isLoading ? (\n              <Skeleton height=\"80px\" mb=\"16px\" />\n            ) : (\n              nftsInWallet.map((walletNft) => {\n                const [firstTokenId] = tokenIds[walletNft.identifier]\n                const address = getAddressByType(walletNft.type)\n\n                return (\n                  <SelectionCard\n                    name=\"profilePicture\"\n                    key={walletNft.identifier}\n                    value={firstTokenId}\n                    image={`/images/nfts/${walletNft.images.md}`}\n                    isChecked={firstTokenId === selectedNft.tokenId}\n                    onChange={(value: string) => actions.setSelectedNft(parseInt(value, 10), address)}\n                  >\n                    <Text bold>{walletNft.name}</Text>\n                  </SelectionCard>\n                )\n              })\n            )}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n          >\n            {t('Approve')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n","import React, { useMemo } from 'react'\nimport { Card, CardBody, CommunityIcon, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport shuffle from 'lodash/shuffle'\nimport { useTeams } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport useProfileCreation from './contexts/hook'\n\nconst Team: React.FC = () => {\n  const { teamId: currentTeamId, actions } = useProfileCreation()\n  const { t } = useTranslation()\n  const { teams } = useTeams()\n  const handleTeamSelection = (value: string) => actions.setTeamId(parseInt(value, 10))\n  const teamValues = useMemo(() => shuffle(Object.values(teams)), [teams])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 3 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Join a Team')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('It won’t be possible to undo the choice you make for the foreseeable future!')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Join a Team')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'There’s currently no big difference between teams, and no benefit of joining one team over another for now. So pick whichever one you like!',\n            )}\n          </Text>\n          {teamValues &&\n            teamValues.map((team) => {\n              return (\n                <SelectionCard\n                  key={team.name}\n                  name=\"teams-selection\"\n                  value={team.id}\n                  isChecked={currentTeamId === team.id}\n                  image={`/images/teams/${team.images.md}`}\n                  onChange={handleTeamSelection}\n                  disabled={!team.isJoinable}\n                >\n                  <Text bold>{team.name}</Text>\n                  <Flex>\n                    <CommunityIcon mr=\"8px\" />\n                    <Text>{team.users.toLocaleString()}</Text>\n                  </Flex>\n                </SelectionCard>\n              )\n            })}\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={currentTeamId === null}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Team\n","import React from 'react'\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useProfile } from 'hooks/useContract'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { REGISTER_COST } from '../ProfileCreation/config'\nimport ApproveConfirmButtons from './ApproveConfirmButtons'\nimport { State } from '../ProfileCreation/contexts/types'\n\ninterface Props {\n  userName: string\n  selectedNft: State['selectedNft']\n  account: string\n  teamId: number\n  minimumCakeRequired: BigNumber\n  allowance: BigNumber\n  onDismiss?: () => void\n}\n\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\n  account,\n  teamId,\n  selectedNft,\n  minimumCakeRequired,\n  allowance,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const profileContract = useProfile()\n  const dispatch = useAppDispatch()\n  const { toastSuccess } = useToast()\n  const cakeContract = useCake()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.methods.allowance(account, profileContract.options.address).call()\n          const currentAllowance = new BigNumber(response)\n          return currentAllowance.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return cakeContract.methods.approve(profileContract.options.address, allowance.toJSON()).send({ from: account })\n      },\n      onConfirm: () => {\n        return profileContract.methods\n          .createProfile(teamId, selectedNft.nftAddress, selectedNft.tokenId)\n          .send({ from: account })\n      },\n      onSuccess: async () => {\n        await dispatch(fetchProfile(account))\n        onDismiss()\n        toastSuccess(t('Profile created!'))\n      },\n    })\n\n  return (\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\n      </Text>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Text>{t('Cost')}</Text>\n        <Text>{t('%num% CAKE', { num: REGISTER_COST })}</Text>\n      </Flex>\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n    </Modal>\n  )\n}\n\nexport default ConfirmProfileCreationModal\n","import { useReducer } from 'react'\n\nexport enum Views {\n  START = 'start',\n  CHANGE = 'change',\n  REMOVE = 'remove',\n  APPROVE = 'approve',\n}\n\nexport type Actions =\n  | {\n      type: 'set_view'\n      view: Views\n    }\n  | {\n      type: 'go_previous'\n    }\n\nexport interface State {\n  currentView: Views\n  previousView: Views | null\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'set_view':\n      return {\n        ...state,\n        currentView: action.view,\n        previousView: state.currentView,\n      }\n    case 'go_previous':\n      return {\n        ...state,\n        currentView: state.previousView,\n        previousView: state.currentView,\n      }\n    default:\n      return state\n  }\n}\n\nexport interface UseEditProfileResponse extends State {\n  goToStart: () => void\n  goToChange: () => void\n  goToApprove: () => void\n  goToRemove: () => void\n  goPrevious: () => void\n}\n\nconst useEditProfile = (): UseEditProfileResponse => {\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null,\n  })\n\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\n  const goPrevious = () => dispatch({ type: 'go_previous' })\n\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\n}\n\nexport default useEditProfile\n","import React, { useContext } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport NoWalletConnected from '../components/WalletNotConnected'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport Mint from './Mint'\nimport ProfilePicture from './ProfilePicture'\nimport TeamSelection from './TeamSelection'\nimport UserName from './UserName'\n\nconst Steps = () => {\n  const { t } = useTranslation()\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <NoWalletConnected />\n  }\n\n  if (!isInitialized) {\n    return <div>{t('Loading...')}</div>\n  }\n\n  if (currentStep === 0) {\n    return <Mint />\n  }\n\n  if (currentStep === 1) {\n    return <ProfilePicture />\n  }\n\n  if (currentStep === 2) {\n    return <TeamSelection />\n  }\n\n  if (currentStep === 3) {\n    return <UserName />\n  }\n\n  return null\n}\n\nexport default Steps\n","import React from 'react'\nimport Page from 'components/layout/Page'\nimport Header from './Header'\nimport ProfileCreationProvider from './contexts/ProfileCreationProvider'\nimport Steps from './Steps'\n\nconst ProfileCreation = () => (\n  <ProfileCreationProvider>\n    <Page>\n      <Header />\n      <Steps />\n    </Page>\n  </ProfileCreationProvider>\n)\n\nexport default ProfileCreation\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { Modal, Text, InjectedModalProps, Button, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport { useClaimRefundContract } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimRefundContract } from 'utils/contractHelpers'\n\ninterface ClaimGiftProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nexport const useCanClaim = () => {\n  const [canClaim, setCanClaim] = useState(false)\n  const [refresh, setRefresh] = useState(1)\n  const { account } = useWeb3React()\n\n  const checkClaimStatus = useCallback(() => {\n    setRefresh((prevRefresh) => prevRefresh + 1)\n  }, [setRefresh])\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract()\n      const walletCanClaim = await claimRefundContract.methods.canClaim(account).call()\n      setCanClaim(walletCanClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, refresh, setCanClaim])\n\n  return { canClaim, checkClaimStatus }\n}\n\nconst ClaimGift: React.FC<ClaimGiftProps> = ({ onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { canClaim } = useCanClaim()\n  const claimRefundContract = useClaimRefundContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleClick = () => {\n    claimRefundContract.methods\n      .getCakeBack()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Success!'))\n        onSuccess()\n        onDismiss()\n      })\n      .on('error', (error) => {\n        setIsConfirming(false)\n        toastError(t('Error'), error?.message)\n      })\n  }\n\n  return (\n    <Modal title={t('Claim your Gift!')} onDismiss={onDismiss}>\n      <div style={{ maxWidth: '640px' }}>\n        <Text as=\"p\">{t('Thank you for being a day-one user of Pancake Profiles!')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {t(\n            \"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\",\n          )}\n        </Text>\n        <Text as=\"p\">{t('To make it up to you, we’ll refund you the full 4 BRIS it cost to make your bunny.')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {t('We’re also preparing an all-new collectible for you to claim (for free!) in the near future.')}\n        </Text>\n        <Text as=\"p\" mb=\"24px\">\n          {t(\n            'Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.',\n          )}\n        </Text>\n        <Button\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          isLoading={isConfirming}\n          onClick={handleClick}\n          disabled={!canClaim}\n        >\n          {t('Claim Your CAKE')}\n        </Button>\n      </div>\n    </Modal>\n  )\n}\n\nexport default ClaimGift\n","import { useEffect, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useToast from './useToast'\n\nconst useGetProfileCosts = () => {\n  const { t } = useTranslation()\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: BIG_ZERO,\n    numberCakeToRegister: BIG_ZERO,\n    numberCakeToUpdate: BIG_ZERO,\n  })\n  const { toastError } = useToast()\n\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const profileContract = getProfileContract()\n        const [numberCakeToReactivate, numberCakeToRegister, numberCakeToUpdate] = await makeBatchRequest([\n          profileContract.methods.numberCakeToReactivate().call,\n          profileContract.methods.numberCakeToRegister().call,\n          profileContract.methods.numberCakeToUpdate().call,\n        ])\n\n        setCosts({\n          numberCakeToReactivate: new BigNumber(numberCakeToReactivate as string),\n          numberCakeToRegister: new BigNumber(numberCakeToRegister as string),\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate as string),\n        })\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve BRIS costs for profile'))\n      }\n    }\n\n    fetchCosts()\n  }, [setCosts, toastError, t])\n\n  return costs\n}\n\nexport default useGetProfileCosts\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { useCake } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport { useProfile } from 'state/hooks'\nimport { UseEditProfileResponse } from './reducer'\nimport ProfileAvatar from '../ProfileAvatar'\n\ninterface StartPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n  goToRemove: UseEditProfileResponse['goToRemove']\n  goToApprove: UseEditProfileResponse['goToApprove']\n}\n\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\n  border-color: ${({ theme }) => theme.colors.failure};\n  color: ${({ theme }) => theme.colors.failure};\n  margin-bottom: 24px;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    border-color: ${({ theme }) => theme.colors.failure};\n    opacity: 0.8;\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\n  const [needsApproval, setNeedsApproval] = useState(null)\n  const { profile } = useProfile()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeRequired)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  /**\n   * Check if the wallet has the required BRIS allowance to change their profile pic or reactivate\n   * If they don't, we send them to the approval screen first\n   */\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      const response = await cakeContract.methods.allowance(account, getPancakeProfileAddress()).call()\n      const currentAllowance = new BigNumber(response)\n      setNeedsApproval(currentAllowance.lt(cost))\n    }\n\n    if (account) {\n      checkApprovalStatus()\n    }\n  }, [account, cost, setNeedsApproval, cakeContract])\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n      <AvatarWrapper>\n        <ProfileAvatar profile={profile} />\n      </AvatarWrapper>\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\n        <Text as=\"p\" color=\"failure\">\n          {!hasMinimumCakeRequired &&\n            t('%minimum% BRIS required to change profile pic', { minimum: getFullDisplayBalance(minimumCakeRequired) })}\n        </Text>\n      </Flex>\n      {profile.isActive ? (\n        <>\n          <Button\n            width=\"100%\"\n            mb=\"8px\"\n            onClick={needsApproval === true ? goToApprove : goToChange}\n            disabled={!hasMinimumCakeRequired || needsApproval === null}\n          >\n            {t('Change Profile Pic')}\n          </Button>\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\n            {t('Remove Profile Pic')}\n          </DangerOutline>\n        </>\n      ) : (\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={needsApproval === true ? goToApprove : goToChange}\n          disabled={!hasMinimumCakeRequired || needsApproval === null}\n        >\n          {t('Reactivate Profile')}\n        </Button>\n      )}\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default StartPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/hooks'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useProfile as useProfileContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\ntype PauseProfilePageProps = InjectedModalProps\n\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { profile } = useProfile()\n  const { numberCakeToReactivate } = useGetProfileCosts()\n  const { t } = useTranslation()\n  const pancakeProfileContract = useProfileContract()\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const dispatch = useAppDispatch()\n\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\n\n  const handleDeactivateProfile = () => {\n    pancakeProfileContract.methods\n      .pauseProfile()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', async () => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess(t('Profile Paused!'))\n\n        onDismiss()\n      })\n      .on('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsConfirming(false)\n      })\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <>\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t(\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\n        )}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: getBalanceNumber(numberCakeToReactivate) })}\n      </Text>\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\n        <Flex alignItems=\"center\">\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\n          <Text ml=\"8px\">{t('I understand')}</Text>\n        </Flex>\n      </label>\n      <Button\n        width=\"100%\"\n        isLoading={isConfirming}\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={!isAcknowledged || isConfirming}\n        onClick={handleDeactivateProfile}\n        mb=\"8px\"\n      >\n        {t('Confirm')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default PauseProfilePage\n","import React, { useState } from 'react'\nimport { Button, InjectedModalProps, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCollectibles, useProfile } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { fetchProfile } from 'state/profile'\nimport { getAddressByType } from 'utils/collectibles'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useERC721, useProfile as useProfileContract } from 'hooks/useContract'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport SelectionCard from '../SelectionCard'\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null,\n  })\n  const { t } = useTranslation()\n  const { isLoading, tokenIds, nftsInWallet } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const contract = useERC721(selectedNft.nftAddress)\n  const profileContract = useProfileContract()\n  const { account } = useWeb3React()\n  const { toastSuccess } = useToast()\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onApprove: () => {\n        return contract.methods.approve(getPancakeProfileAddress(), selectedNft.tokenId).send({ from: account })\n      },\n      onConfirm: () => {\n        if (!profile.isActive) {\n          return profileContract.methods\n            .reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId)\n            .send({ from: account })\n        }\n\n        return profileContract.methods\n          .updateProfile(selectedNft.nftAddress, selectedNft.tokenId)\n          .send({ from: account })\n      },\n      onSuccess: async () => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess(t('Profile Updated!'))\n\n        onDismiss()\n      },\n    })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      {isLoading ? (\n        <Skeleton height=\"80px\" mb=\"16px\" />\n      ) : (\n        nftsInWallet.map((walletNft) => {\n          const [firstTokenId] = tokenIds[walletNft.identifier]\n          const handleChange = (value: string) => {\n            setSelectedNft({\n              tokenId: Number(value),\n              nftAddress: getAddressByType(walletNft.type),\n            })\n          }\n\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={walletNft.identifier}\n              value={firstTokenId}\n              image={`/images/nfts/${walletNft.images.md}`}\n              isChecked={firstTokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })\n      )}\n      {!isLoading && nftsInWallet.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useProfile } from 'state/hooks'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface ApproveCakePageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const cakeContract = useCake()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(getPancakeProfileAddress(), cost.times(2).toJSON())\n      .send({ from: account })\n      .on('sending', () => {\n        setIsApproving(true)\n      })\n      .on('receipt', () => {\n        goToChange()\n      })\n      .on('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsApproving(false)\n      })\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\n        <Text>{getFullDisplayBalance(cost)} CAKE</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {t('Approve')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveCakePage\n","import React from 'react'\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useEditProfile, { Views } from './reducer'\nimport StartView from './StartView'\nimport PauseProfileView from './PauseProfileView'\nimport ChangeProfilePicView from './ChangeProfilePicView'\nimport ApproveCakeView from './ApproveCakeView'\n\ntype EditProfileModalProps = InjectedModalProps\n\nconst viewTitle = {\n  [Views.START]: 'Edit Profile',\n  [Views.CHANGE]: 'Change Profile Pic',\n  [Views.REMOVE]: 'Remove Profile Pic',\n  [Views.APPROVE]: 'Approve CAKE',\n}\n\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\n  const { t } = useTranslation()\n  const translationKey = viewTitle[currentView]\n\n  const isStartView = currentView === Views.START\n  const handleBack = isStartView ? null : () => goPrevious()\n\n  return (\n    <Modal title={t(translationKey)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\n      <div style={{ maxWidth: '400px' }}>\n        {currentView === Views.START && (\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\n        )}\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\n      </div>\n    </Modal>\n  )\n}\n\nexport default EditProfileModal\n","import React from 'react'\nimport { Button, Flex, Heading, useModal, Won } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport ClaimNftAndCakeModal, { useCanClaim } from './ClaimGiftModal'\nimport HeaderWrapper from './HeaderWrapper'\nimport EditProfileModal from './EditProfileModal'\n\nconst ProfileHeader = () => {\n  const { t } = useTranslation()\n  const { canClaim, checkClaimStatus } = useCanClaim()\n  const [onPresentClaimGiftModal] = useModal(<ClaimNftAndCakeModal onSuccess={checkClaimStatus} />)\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n  const { hasProfile } = useProfile()\n\n  return (\n    <HeaderWrapper>\n      <Flex\n        flexDirection={['column', null, 'row']}\n        alignItems={['start', null, 'center']}\n        justifyContent=\"space-between\"\n      >\n        <div>\n          <Heading as=\"h1\" scale=\"xxl\" mb=\"8px\" color=\"secondary\">\n            {t('Your Profile')}\n          </Heading>\n          <Heading as=\"h2\" scale=\"lg\" mb=\"16px\">\n            {t('Check your stats and collect achievements')}\n          </Heading>\n          {hasProfile && <Button onClick={onEditProfileModal}>{t('Edit Profile')}</Button>}\n        </div>\n        {canClaim && (\n          <Button variant=\"tertiary\" onClick={onPresentClaimGiftModal} startIcon={<Won />}>\n            {t('You’ve got a gift to claim!')}\n          </Button>\n        )}\n      </Flex>\n    </HeaderWrapper>\n  )\n}\n\nexport default ProfileHeader\n","import React, { ImgHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\n\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\n  badge?: string\n}\n\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst StyledAchievementAvatar = styled.img`\n  border-radius: 50%;\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\n  if (!badge) {\n    return <NoBadgePlaceholder />\n  }\n\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\n}\n\nexport default AchievementAvatar\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementTitleType } from 'state/types'\n\ninterface AchievementTitleProps extends TextProps {\n  title: AchievementTitleType\n}\n\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\n  const { t } = useTranslation()\n\n  if (typeof title === 'string') {\n    return (\n      <Text bold {...props}>\n        {title}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = title\n\n  return (\n    <Text bold {...props}>\n      {t(key, data)}\n    </Text>\n  )\n}\n\nexport default AchievementTitle\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementDescriptionType } from 'state/types'\nimport styled from 'styled-components'\n\ninterface AchievementDescriptionProps extends TextProps {\n  description?: AchievementDescriptionType\n}\n\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\n  const { t } = useTranslation()\n\n  if (!description) {\n    return null\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\n        {description}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = description\n\n  return (\n    <Description color=\"textSubtle\" {...props}>\n      {t(key, data)}\n    </Description>\n  )\n}\n\nexport default AchievementDescription\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport AchievementAvatar from './AchievementAvatar'\nimport AchievementTitle from './AchievementTitle'\nimport AchievementDescription from './AchievementDescription'\n\ninterface AchievementCardProps {\n  achievement: Achievement\n}\n\nconst Details = styled(Flex)`\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  return (\n    <Flex>\n      <AchievementAvatar badge={achievement.badge} />\n      <Details>\n        <AchievementTitle title={achievement.title} />\n        <AchievementDescription description={achievement.description} />\n      </Details>\n      <Flex alignItems=\"center\">\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AchievementCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAchievements } from 'state/hooks'\nimport AchievementCard from './AchievementCard'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst AchievementsList = () => {\n  const { t } = useTranslation()\n  const achievements = useAchievements()\n\n  return (\n    <>\n      <Grid>\n        {achievements.map((achievement) => (\n          <AchievementCard key={achievement.id} achievement={achievement} />\n        ))}\n      </Grid>\n      {achievements.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n            {t('No achievements yet!')}\n          </Heading>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default AchievementsList\n","import styled from 'styled-components'\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nexport default ActionColumn\n","import React from 'react'\nimport { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PointsLabelProps extends FlexProps {\n  points: number\n}\n\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\n  const { t } = useTranslation()\n  const localePoints = points.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\n    </Flex>\n  )\n}\n\nexport default PointsLabel\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport ActionColumn from '../ActionColumn'\nimport PointsLabel from './PointsLabel'\nimport AchievementTitle from '../AchievementTitle'\nimport AchievementAvatar from '../AchievementAvatar'\nimport AchievementDescription from '../AchievementDescription'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleCollectPoints = () => {\n    pointCenterContract.methods\n      .getPoints(achievement.address)\n      .send({ from: account })\n      .on('sending', () => {\n        setIsCollecting(true)\n      })\n      .on('receipt', () => {\n        setIsCollecting(false)\n        onCollectSuccess(achievement)\n        toastSuccess(t('Points Collected!'))\n      })\n      .on('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsCollecting(false)\n      })\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","import { useTranslation } from 'contexts/Localization'\nimport React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { ChevronLeftIcon, Flex, Text, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\n\ninterface MenuProps {\n  activeIndex?: number\n}\n\nconst Menu: React.FC<MenuProps> = ({ activeIndex = 0 }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Flex mb=\"24px\">\n        <RouterLink to=\"/teams\">\n          <Flex alignItems=\"center\">\n            <ChevronLeftIcon color=\"primary\" />\n            <Text color=\"primary\">{t('Teams Overview')}</Text>\n          </Flex>\n        </RouterLink>\n      </Flex>\n\n      <Flex mb=\"24px\" justifyContent=\"center\">\n        <ButtonMenu activeIndex={activeIndex} variant=\"subtle\" scale=\"sm\">\n          <ButtonMenuItem as={RouterLink} to=\"/profile/tasks\">\n            {t('Task Center')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={RouterLink} to=\"/profile\">\n            {t('Public Profile')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Flex>\n    </>\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport { Card, CardBody, CardHeader, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport AchievementsList from './components/AchievementsList'\nimport ClaimPointsCallout from './components/ClaimPointsCallout '\nimport ComingSoon from './components/ComingSoon'\nimport Menu from './components/Menu'\n\nconst TaskCenter = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Menu />\n      <ClaimPointsCallout />\n      <Card mb=\"32px\">\n        <CardHeader>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <div>\n              <Heading scale=\"lg\" mb=\"8px\">\n                {t('Achievements')}\n              </Heading>\n              <Text as=\"p\">{t('Earn more points for completing larger quests!')}</Text>\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <AchievementsList />\n        </CardBody>\n      </Card>\n      <Card mb=\"32px\">\n        <CardHeader>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <div>\n              <Heading scale=\"lg\" mb=\"8px\">\n                {t('Task Center')}\n              </Heading>\n              <Text as=\"p\">{t('Earn points by completing regular tasks!')}</Text>\n              <Text as=\"p\">{t('Collecting points for these tasks makes them available again.')}</Text>\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <ComingSoon />\n        </CardBody>\n      </Card>\n    </>\n  )\n}\n\nexport default TaskCenter\n","import styled, { DefaultTheme } from 'styled-components'\nimport { CardHeader as UIKitCardHeader } from '@pancakeswap/uikit'\n\nconst getBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n\nconst CardHeader = styled(UIKitCardHeader)`\n  background: ${({ theme }) => getBackground(theme)};\n  position: relative;\n`\n\nexport default CardHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\n\ninterface CollectibleCardProps {\n  nft: Nft\n}\n\nconst PreviewImage = styled.img`\n  border-radius: 4px;\n  margin-bottom: 8px;\n`\n\nconst CollectibleCard: React.FC<CollectibleCardProps> = ({ nft }) => {\n  return (\n    <div>\n      <PreviewImage src={`/images/nfts/${nft.images.lg}`} />\n      <Text bold mb=\"8px\">\n        {nft.name}\n      </Text>\n      <Text as=\"p\" fontSize=\"12px\" color=\"textSubtle\">\n        {nft.description}\n      </Text>\n    </div>\n  )\n}\n\nexport default CollectibleCard\n","import React from 'react'\nimport { Heading, Text, Flex, ChevronRightIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCollectibles } from 'state/hooks'\nimport styled from 'styled-components'\nimport CollectibleCard from './CollectibleCard'\n\nconst CollectibleList = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: repeat(2, 1fr);\n  padding: 16px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 24px;\n    grid-template-columns: repeat(3, 1fr);\n    padding: 24px 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: repeat(5, 1fr);\n  }\n`\n\nconst Collectibles = () => {\n  const { t } = useTranslation()\n  const { nftsInWallet } = useGetCollectibles()\n\n  return (\n    <>\n      <Heading as=\"h4\" scale=\"md\" mb=\"8px\">\n        {t('Pancake Collectibles')}\n      </Heading>\n      <Text as=\"p\">\n        {t('Pancake Collectibles are special ERC-721 NFTs that can be used on the PancakeSwap platform.')}\n      </Text>\n      <Text as=\"p\">\n        {t('NFTs in this user’s wallet that aren’t approved Pancake Collectibles won’t be shown here.')}\n      </Text>\n      {nftsInWallet.length > 0 && (\n        <CollectibleList>\n          {nftsInWallet.map((nftInWallet) => (\n            <CollectibleCard key={nftInWallet.identifier} nft={nftInWallet} />\n          ))}\n        </CollectibleList>\n      )}\n      {nftsInWallet.length === 0 && (\n        <Flex justifyContent=\"center\" p=\"32px\">\n          <Text fontSize=\"20px\" bold color=\"textDisabled\">\n            {t('No NFTs Found')}\n          </Text>\n        </Flex>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <Link to=\"/collectibles\">{t('See all approved Pancake Collectibles')}</Link>\n        <ChevronRightIcon />\n      </Flex>\n    </>\n  )\n}\n\nexport default Collectibles\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useModal } from '@pancakeswap/uikit'\nimport EditProfileModal from './EditProfileModal'\nimport ProfileAvatar, { ProfileAvatarProps } from './ProfileAvatar'\n\nconst EditOverlay = styled.div`\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\n  background-size: 24px;\n  border-radius: 50%;\n  left: 0;\n  height: 100%;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  transition: opacity 300ms;\n  width: 100%;\n  z-index: 3;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    background-size: 48px;\n  }\n`\n\nconst StyledEditProfileAvatar = styled.div`\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n\n    ${EditOverlay} {\n      opacity: 1;\n    }\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst EditProfileAvatar: React.FC<ProfileAvatarProps> = ({ profile }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\n      <AvatarWrapper>\n        <ProfileAvatar profile={profile} />\n      </AvatarWrapper>\n      <EditOverlay />\n    </StyledEditProfileAvatar>\n  )\n}\n\nexport default EditProfileAvatar\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  CheckmarkCircleIcon,\n  Flex,\n  Heading,\n  Link,\n  Tag,\n  Text,\n  PrizeIcon,\n  OpenNewIcon,\n  BlockIcon,\n  VisibilityOn,\n  VisibilityOff,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useProfile } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport Menu from './components/Menu'\nimport CardHeader from './components/CardHeader'\nimport Collectibles from './components/Collectibles'\nimport WalletNotConnected from './components/WalletNotConnected'\nimport StatBox from './components/StatBox'\nimport EditProfileAvatar from './components/EditProfileAvatar'\nimport AchievementsList from './components/AchievementsList'\n\nconst Content = styled.div`\n  flex: 1;\n  padding: 16px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 16px;\n  }\n`\n\nconst Username = styled(Heading)`\n  font-size: 16px;\n  line-height: 24px;\n  margin-bottom: 8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 40px;\n    line-height: 44px;\n  }\n`\n\nconst Status = styled.div`\n  position: absolute;\n  right: 24px;\n  top: 24px;\n`\n\nconst ResponsiveText = styled(Text)`\n  font-size: 12px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n  }\n`\n\nconst AddressLink = styled(Link)`\n  display: inline-block;\n  font-weight: 400;\n  font-size: 12px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 80px;\n  white-space: nowrap;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n    width: auto;\n  }\n`\n\nconst Section = styled.div`\n  margin-bottom: 40px;\n`\n\nconst PublicProfile = () => {\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const [usernameVisibilityToggled, setUsernameVisibility] = usePersistState(false, {\n    localStorageKey: 'username_visibility_toggled',\n  })\n  const { t } = useTranslation()\n\n  if (!account) {\n    return <WalletNotConnected />\n  }\n\n  const toggleUsernameVisibility = () => {\n    setUsernameVisibility(!usernameVisibilityToggled)\n  }\n\n  const { username, team, isActive, points } = profile\n\n  const Icon = usernameVisibilityToggled ? VisibilityOff : VisibilityOn\n\n  return (\n    <>\n      <Menu activeIndex={1} />\n      <div>\n        <Card>\n          <CardHeader>\n            <Flex alignItems={['start', null, 'center']} flexDirection={['column', null, 'row']}>\n              <EditProfileAvatar profile={profile} />\n              <Content>\n                <Flex alignItems=\"center\">\n                  <Username>@{usernameVisibilityToggled ? username : username.replace(/./g, '*')}</Username>\n                  <Icon ml=\"4px\" onClick={toggleUsernameVisibility} cursor=\"pointer\" />\n                </Flex>\n                <Flex alignItems=\"center\">\n                  <AddressLink href={getBscScanAddressUrl(account)} color=\"text\" external>\n                    {account}\n                    <OpenNewIcon ml=\"4px\" />\n                  </AddressLink>\n                </Flex>\n                <ResponsiveText bold>{team.name}</ResponsiveText>\n              </Content>\n            </Flex>\n            <Status>\n              {isActive ? (\n                <Tag startIcon={<CheckmarkCircleIcon width=\"18px\" />} outline>\n                  {t('Active')}\n                </Tag>\n              ) : (\n                <Tag variant=\"failure\" startIcon={<BlockIcon width=\"18px\" />} outline>\n                  {t('Paused')}\n                </Tag>\n              )}\n            </Status>\n          </CardHeader>\n          <CardBody>\n            <StatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\n            <Section>\n              <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\n                {t('Achievements')}\n              </Heading>\n              <AchievementsList />\n            </Section>\n            <Collectibles />\n          </CardBody>\n        </Card>\n      </div>\n    </>\n  )\n}\n\nexport default PublicProfile\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport Page from 'components/layout/Page'\nimport PageLoader from 'components/PageLoader'\nimport { useFetchAchievements, useProfile } from 'state/hooks'\nimport ProfileCreation from './ProfileCreation'\nimport Header from './components/Header'\nimport TaskCenter from './TaskCenter'\nimport PublicProfile from './PublicProfile'\n\nconst Profile = () => {\n  const { isInitialized, isLoading, hasProfile } = useProfile()\n  const { account } = useWeb3React()\n\n  useFetchAchievements()\n\n  if (!isInitialized || isLoading) {\n    return <PageLoader />\n  }\n\n  if (account && !hasProfile) {\n    return (\n      <Page>\n        <ProfileCreation />\n      </Page>\n    )\n  }\n\n  return (\n    <Page>\n      <Header />\n      <Route exact path=\"/profile\">\n        <PublicProfile />\n      </Route>\n      <Route path=\"/profile/tasks\">\n        <TaskCenter />\n      </Route>\n    </Page>\n  )\n}\n\nexport default Profile\n","import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBRISContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getReferralContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getNewLotteryContract\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n// CAKE and BRIS are the same\nexport const useBRIS = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useNewLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getNewLotteryContract(web3), [web3])\n}\n\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useReferralContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getReferralContract(web3), [web3])\n}\n\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t('Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n}) => {\n  const { t } = useTranslation()\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Approving') : t('Approve')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : t('Confirm')}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : t('Confirm')}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Approving') : t('Approve')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype Web3Payload = Record<string, unknown> | null\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt'; payload: Web3Payload }\n  | { type: 'approve_error'; payload: Web3Payload }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt'; payload: Web3Payload }\n  | { type: 'confirm_error'; payload: Web3Payload }\n\ninterface State {\n  approvalState: LoadingState\n  approvalReceipt: Web3Payload\n  approvalError: Web3Payload\n  confirmState: LoadingState\n  confirmReceipt: Web3Payload\n  confirmError: Web3Payload\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  approvalReceipt: null,\n  approvalError: null,\n  confirmState: 'idle',\n  confirmReceipt: null,\n  confirmError: null,\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n        approvalReceipt: actions.payload,\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n        approvalError: actions.payload,\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n        confirmReceipt: actions.payload,\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n        confirmError: actions.payload,\n      }\n    default:\n      return state\n  }\n}\n\ntype ContractHandler = () => any\n\ninterface ApproveConfirmTransaction {\n  onApprove: ContractHandler\n  onConfirm: ContractHandler\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n  onApproveSuccess?: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    approvalReceipt: state.approvalReceipt,\n    approvalError: state.approvalError,\n    confirmReceipt: state.confirmReceipt,\n    confirmError: state.confirmError,\n    handleApprove: () => {\n      onApprove()\n        .on('sending', () => {\n          dispatch({ type: 'approve_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'approve_receipt', payload })\n          onApproveSuccess(state)\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'approve_error', payload: error })\n          console.error('An error occurred approving transaction:', error)\n          toastError(t('An error occurred approving transaction'))\n        })\n    },\n    handleConfirm: () => {\n      onConfirm()\n        .on('sending', () => {\n          dispatch({ type: 'confirm_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'confirm_receipt', payload })\n          onSuccess(state)\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'confirm_error', payload: error })\n          console.error('An error occurred confirming transaction:', error)\n          toastError(t('An error occurred confirming transaction'))\n        })\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import styled from 'styled-components'\n\nconst HeaderWrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nexport default HeaderWrapper\n","import React from 'react'\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\nimport { Profile } from 'state/types'\nimport styled from 'styled-components'\n\nexport interface ProfileAvatarProps {\n  profile: Profile\n}\n\nconst TeamAvatar = styled.img`\n  border: 1px solid ${({ theme }) => theme.card.background};\n  border-radius: 50%;\n  bottom: 0px;\n  position: absolute;\n  right: 0px;\n  min-width: 20px;\n  min-height: 20px;\n  width: 37.5%;\n  height: 37.5%;\n  z-index: 5;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    border-width: 2px;\n  }\n`\n\nconst AvatarWrapper = styled.div<{ bg: string }>`\n  background: url('${({ bg }) => bg}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n// TODO: replace with no profile avatar icon\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\n  width: 100%;\n  height: 100%;\n`\n\nconst ProfileAvatar: React.FC<ProfileAvatarProps> = ({ profile }) => {\n  return (\n    <AvatarWrapper bg={`/images/nfts/${profile.nft?.images?.md}`}>\n      {!profile.isActive && <AvatarInactive />}\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\n    </AvatarWrapper>\n  )\n}\n\nexport default ProfileAvatar\n","import React from 'react'\nimport { BunnyPlaceholderIcon, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ComingSoonProps {\n  children?: React.ReactNode\n}\n\nconst ComingSoon: React.FC<ComingSoonProps> = ({ children }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" p=\"24px\">\n      <BunnyPlaceholderIcon width=\"72px\" height=\"72px\" />\n      <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n        {children || t('Coming Soon!')}\n      </Heading>\n    </Flex>\n  )\n}\n\nexport default ComingSoon\n","import styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst SecondaryCard = styled(Text)`\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px;\n`\n\nSecondaryCard.defaultProps = {\n  p: '24px',\n}\n\nexport default SecondaryCard\n","import React, { ElementType, ReactNode } from 'react'\nimport { Flex, Heading, Text, TextProps } from '@pancakeswap/uikit'\nimport SecondaryCard from './SecondaryCard'\n\ninterface StatBoxProps extends TextProps {\n  icon: ElementType\n  title: ReactNode\n  subtitle: ReactNode\n  isDisabled?: boolean\n}\n\nconst StatBox: React.FC<StatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\n  return (\n    <SecondaryCard {...props}>\n      <Flex alignItems=\"start\">\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\n        <div>\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\n            {title}\n          </Heading>\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\n            {subtitle}\n          </Text>\n        </div>\n      </Flex>\n    </SecondaryCard>\n  )\n}\n\nexport default StatBox\n"],"sourceRoot":""}